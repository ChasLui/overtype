{
  "version": 3,
  "sources": ["../../markdown-actions/src/core/style-args.js", "../../markdown-actions/src/core/selection-new.js", "../../markdown-actions/src/core/insertion-new.js", "../../markdown-actions/src/operations/block-new.js", "../../markdown-actions/src/operations/list-new.js", "../../markdown-actions/src/core/style-text.js", "../../markdown-actions/src/core/detection.js", "../../markdown-actions/src/index-new.js", "../src/parser.js", "../src/shortcuts.js", "../src/themes.js", "../src/styles.js", "../src/icons.js", "../src/toolbar.js", "../src/overtype.js"],
  "sourcesContent": ["/**\n * Style arguments type definition and defaults\n * Matches GitHub's implementation exactly\n */\n\n/**\n * Get default style arguments\n * MUST match GitHub's defaults exactly (index.ts lines 805-818)\n */\nexport function getDefaultStyleArgs() {\n  return {\n    prefix: '',\n    suffix: '',\n    blockPrefix: '',\n    blockSuffix: '',\n    multiline: false,\n    replaceNext: '',\n    prefixSpace: false,\n    scanFor: '',\n    surroundWithNewlines: false,\n    orderedList: false,\n    unorderedList: false,\n    trimFirst: false\n  }\n}\n\n/**\n * Merge style with defaults\n * Ensures ALL properties are present\n */\nexport function mergeStyleWithDefaults(style) {\n  return { ...getDefaultStyleArgs(), ...style }\n}", "/**\n * Selection utilities - EXACT match to GitHub's implementation\n * Based on markdown-toolbar-element index.ts\n */\n\n/**\n * Check if string contains multiple lines\n * GitHub: index.ts line 419-421\n */\nexport function isMultipleLines(string) {\n  return string.trim().split('\\n').length > 1\n}\n\n/**\n * Repeat string n times\n * GitHub: index.ts line 423-425\n */\nfunction repeat(string, n) {\n  return Array(n + 1).join(string)\n}\n\n/**\n * Find word selection start\n * GitHub: index.ts line 427-433\n */\nexport function wordSelectionStart(text, i) {\n  let index = i\n  while (text[index] && text[index - 1] != null && !text[index - 1].match(/\\s/)) {\n    index--\n  }\n  return index\n}\n\n/**\n * Find word selection end\n * GitHub: index.ts line 435-442\n */\nexport function wordSelectionEnd(text, i, multiline) {\n  let index = i\n  const breakpoint = multiline ? /\\n/ : /\\s/\n  while (text[index] && !text[index].match(breakpoint)) {\n    index++\n  }\n  return index\n}\n\n/**\n * Expand selection to line boundaries\n * GitHub: index.ts line 502-515\n * CRITICAL: This modifies the textarea selection directly!\n */\nexport function expandSelectionToLine(textarea) {\n  const lines = textarea.value.split('\\n')\n  let counter = 0\n  for (let index = 0; index < lines.length; index++) {\n    const lineLength = lines[index].length + 1\n    if (textarea.selectionStart >= counter && textarea.selectionStart < counter + lineLength) {\n      textarea.selectionStart = counter\n    }\n    if (textarea.selectionEnd >= counter && textarea.selectionEnd < counter + lineLength) {\n      textarea.selectionEnd = counter + lineLength - 1\n    }\n    counter += lineLength\n  }\n}\n\n/**\n * Expand selected text\n * GitHub: index.ts line 517-537\n * CRITICAL: This modifies the textarea selection to include format markers if they exist\n */\nexport function expandSelectedText(textarea, prefixToUse, suffixToUse, multiline = false) {\n  if (textarea.selectionStart === textarea.selectionEnd) {\n    textarea.selectionStart = wordSelectionStart(textarea.value, textarea.selectionStart)\n    textarea.selectionEnd = wordSelectionEnd(textarea.value, textarea.selectionEnd, multiline)\n  } else {\n    const expandedSelectionStart = textarea.selectionStart - prefixToUse.length\n    const expandedSelectionEnd = textarea.selectionEnd + suffixToUse.length\n    const beginsWithPrefix = textarea.value.slice(expandedSelectionStart, textarea.selectionStart) === prefixToUse\n    const endsWithSuffix = textarea.value.slice(textarea.selectionEnd, expandedSelectionEnd) === suffixToUse\n    if (beginsWithPrefix && endsWithSuffix) {\n      textarea.selectionStart = expandedSelectionStart\n      textarea.selectionEnd = expandedSelectionEnd\n    }\n  }\n  return textarea.value.slice(textarea.selectionStart, textarea.selectionEnd)\n}\n\n/**\n * Calculate newlines to surround selected text\n * GitHub: index.ts line 544-573\n */\nexport function newlinesToSurroundSelectedText(textarea) {\n  const beforeSelection = textarea.value.slice(0, textarea.selectionStart)\n  const afterSelection = textarea.value.slice(textarea.selectionEnd)\n\n  const breaksBefore = beforeSelection.match(/\\n*$/)\n  const breaksAfter = afterSelection.match(/^\\n*/)\n  const newlinesBeforeSelection = breaksBefore ? breaksBefore[0].length : 0\n  const newlinesAfterSelection = breaksAfter ? breaksAfter[0].length : 0\n\n  let newlinesToAppend\n  let newlinesToPrepend\n\n  if (beforeSelection.match(/\\S/) && newlinesBeforeSelection < 2) {\n    newlinesToAppend = repeat('\\n', 2 - newlinesBeforeSelection)\n  }\n\n  if (afterSelection.match(/\\S/) && newlinesAfterSelection < 2) {\n    newlinesToPrepend = repeat('\\n', 2 - newlinesAfterSelection)\n  }\n\n  if (newlinesToAppend == null) {\n    newlinesToAppend = ''\n  }\n\n  if (newlinesToPrepend == null) {\n    newlinesToPrepend = ''\n  }\n\n  return { newlinesToAppend, newlinesToPrepend }\n}\n\n/**\n * Preserve selection helper (not in GitHub's but useful)\n */\nexport function preserveSelection(textarea, callback) {\n  const start = textarea.selectionStart\n  const end = textarea.selectionEnd\n  const scrollTop = textarea.scrollTop\n  \n  callback()\n  \n  textarea.selectionStart = start\n  textarea.selectionEnd = end\n  textarea.scrollTop = scrollTop\n}", "/**\n * Text insertion with undo/redo support\n * EXACT match to GitHub's implementation\n * Based on markdown-toolbar-element index.ts lines 444-485\n */\n\nlet canInsertText = null\n\n/**\n * Insert text into textarea\n * GitHub: index.ts lines 446-485\n * CRITICAL: Uses the CURRENT selection (which may have been expanded)\n */\nexport function insertText(textarea, { text, selectionStart, selectionEnd }) {\n  const originalSelectionStart = textarea.selectionStart\n  const before = textarea.value.slice(0, originalSelectionStart)\n  const after = textarea.value.slice(textarea.selectionEnd)\n\n  if (canInsertText === null || canInsertText === true) {\n    textarea.contentEditable = 'true'\n    try {\n      canInsertText = document.execCommand('insertText', false, text)\n    } catch (error) {\n      canInsertText = false\n    }\n    textarea.contentEditable = 'false'\n  }\n\n  if (canInsertText && !textarea.value.slice(0, textarea.selectionStart).endsWith(text)) {\n    canInsertText = false\n  }\n\n  if (!canInsertText) {\n    try {\n      document.execCommand('ms-beginUndoUnit')\n    } catch (e) {\n      // Do nothing.\n    }\n    textarea.value = before + text + after\n    try {\n      document.execCommand('ms-endUndoUnit')\n    } catch (e) {\n      // Do nothing.\n    }\n    textarea.dispatchEvent(new CustomEvent('input', { bubbles: true, cancelable: true }))\n  }\n\n  if (selectionStart != null && selectionEnd != null) {\n    textarea.setSelectionRange(selectionStart, selectionEnd)\n  } else {\n    textarea.setSelectionRange(originalSelectionStart, textarea.selectionEnd)\n  }\n}\n\n/**\n * Set undo method (for configuration)\n */\nexport function setUndoMethod(method) {\n  if (method === 'native') {\n    canInsertText = true\n  } else if (method === 'manual') {\n    canInsertText = false\n  } else {\n    canInsertText = null\n  }\n}", "/**\n * Block and multiline operations - EXACT match to GitHub's implementation\n * Based on markdown-toolbar-element index.ts lines 581-670\n */\n\nimport { \n  isMultipleLines, \n  expandSelectedText, \n  newlinesToSurroundSelectedText \n} from '../core/selection-new.js'\n\n/**\n * Block style operation\n * GitHub: index.ts lines 581-646\n */\nexport function blockStyle(textarea, arg) {\n  let newlinesToAppend\n  let newlinesToPrepend\n\n  const { prefix, suffix, blockPrefix, blockSuffix, replaceNext, prefixSpace, scanFor, surroundWithNewlines } = arg\n  const originalSelectionStart = textarea.selectionStart\n  const originalSelectionEnd = textarea.selectionEnd\n\n  let selectedText = textarea.value.slice(textarea.selectionStart, textarea.selectionEnd)\n  let prefixToUse = isMultipleLines(selectedText) && blockPrefix.length > 0 ? `${blockPrefix}\\n` : prefix\n  let suffixToUse = isMultipleLines(selectedText) && blockSuffix.length > 0 ? `\\n${blockSuffix}` : suffix\n\n  if (prefixSpace) {\n    const beforeSelection = textarea.value[textarea.selectionStart - 1]\n    if (textarea.selectionStart !== 0 && beforeSelection != null && !beforeSelection.match(/\\s/)) {\n      prefixToUse = ` ${prefixToUse}`\n    }\n  }\n  selectedText = expandSelectedText(textarea, prefixToUse, suffixToUse, arg.multiline)\n  let selectionStart = textarea.selectionStart\n  let selectionEnd = textarea.selectionEnd\n  const hasReplaceNext = replaceNext.length > 0 && suffixToUse.indexOf(replaceNext) > -1 && selectedText.length > 0\n  if (surroundWithNewlines) {\n    const ref = newlinesToSurroundSelectedText(textarea)\n    newlinesToAppend = ref.newlinesToAppend\n    newlinesToPrepend = ref.newlinesToPrepend\n    prefixToUse = newlinesToAppend + prefix\n    suffixToUse += newlinesToPrepend\n  }\n\n  if (selectedText.startsWith(prefixToUse) && selectedText.endsWith(suffixToUse)) {\n    const replacementText = selectedText.slice(prefixToUse.length, selectedText.length - suffixToUse.length)\n    if (originalSelectionStart === originalSelectionEnd) {\n      let position = originalSelectionStart - prefixToUse.length\n      position = Math.max(position, selectionStart)\n      position = Math.min(position, selectionStart + replacementText.length)\n      selectionStart = selectionEnd = position\n    } else {\n      selectionEnd = selectionStart + replacementText.length\n    }\n    return { text: replacementText, selectionStart, selectionEnd }\n  } else if (!hasReplaceNext) {\n    let replacementText = prefixToUse + selectedText + suffixToUse\n    selectionStart = originalSelectionStart + prefixToUse.length\n    selectionEnd = originalSelectionEnd + prefixToUse.length\n    const whitespaceEdges = selectedText.match(/^\\s*|\\s*$/g)\n    if (arg.trimFirst && whitespaceEdges) {\n      const leadingWhitespace = whitespaceEdges[0] || ''\n      const trailingWhitespace = whitespaceEdges[1] || ''\n      replacementText = leadingWhitespace + prefixToUse + selectedText.trim() + suffixToUse + trailingWhitespace\n      selectionStart += leadingWhitespace.length\n      selectionEnd -= trailingWhitespace.length\n    }\n    return { text: replacementText, selectionStart, selectionEnd }\n  } else if (scanFor.length > 0 && selectedText.match(scanFor)) {\n    suffixToUse = suffixToUse.replace(replaceNext, selectedText)\n    const replacementText = prefixToUse + selectedText + suffixToUse\n    selectionStart = selectionEnd = selectionStart + prefixToUse.length\n    return { text: replacementText, selectionStart, selectionEnd }\n  } else {\n    const replacementText = prefixToUse + selectedText + suffixToUse\n    selectionStart = selectionStart + prefixToUse.length + selectedText.length + suffixToUse.indexOf(replaceNext)\n    selectionEnd = selectionStart + replaceNext.length\n    return { text: replacementText, selectionStart, selectionEnd }\n  }\n}\n\n/**\n * Multiline style operation\n * GitHub: index.ts lines 648-670\n */\nexport function multilineStyle(textarea, arg) {\n  const { prefix, suffix, surroundWithNewlines } = arg\n  let text = textarea.value.slice(textarea.selectionStart, textarea.selectionEnd)\n  let selectionStart = textarea.selectionStart\n  let selectionEnd = textarea.selectionEnd\n  const lines = text.split('\\n')\n  const undoStyle = lines.every(line => line.startsWith(prefix) && line.endsWith(suffix))\n\n  if (undoStyle) {\n    text = lines.map(line => line.slice(prefix.length, line.length - suffix.length)).join('\\n')\n    selectionEnd = selectionStart + text.length\n  } else {\n    text = lines.map(line => prefix + line + suffix).join('\\n')\n    if (surroundWithNewlines) {\n      const { newlinesToAppend, newlinesToPrepend } = newlinesToSurroundSelectedText(textarea)\n      selectionStart += newlinesToAppend.length\n      selectionEnd = selectionStart + text.length\n      text = newlinesToAppend + text + newlinesToPrepend\n    }\n  }\n\n  return { text, selectionStart, selectionEnd }\n}", "/**\n * List operations - EXACT match to GitHub's implementation\n * Based on markdown-toolbar-element index.ts lines 676-784\n */\n\nimport { expandSelectionToLine, newlinesToSurroundSelectedText } from '../core/selection-new.js'\n\n/**\n * Undo ordered list style\n * GitHub: index.ts lines 676-689\n */\nfunction undoOrderedListStyle(text) {\n  const lines = text.split('\\n')\n  const orderedListRegex = /^\\d+\\.\\s+/\n  const shouldUndoOrderedList = lines.every(line => orderedListRegex.test(line))\n  let result = lines\n  if (shouldUndoOrderedList) {\n    result = lines.map(line => line.replace(orderedListRegex, ''))\n  }\n\n  return {\n    text: result.join('\\n'),\n    processed: shouldUndoOrderedList\n  }\n}\n\n/**\n * Undo unordered list style\n * GitHub: index.ts lines 691-704\n */\nfunction undoUnorderedListStyle(text) {\n  const lines = text.split('\\n')\n  const unorderedListPrefix = '- '\n  const shouldUndoUnorderedList = lines.every(line => line.startsWith(unorderedListPrefix))\n  let result = lines\n  if (shouldUndoUnorderedList) {\n    result = lines.map(line => line.slice(unorderedListPrefix.length, line.length))\n  }\n\n  return {\n    text: result.join('\\n'),\n    processed: shouldUndoUnorderedList\n  }\n}\n\n/**\n * Make prefix for list item\n * GitHub: index.ts lines 706-712\n */\nfunction makePrefix(index, unorderedList) {\n  if (unorderedList) {\n    return '- '\n  } else {\n    return `${index + 1}. `\n  }\n}\n\n/**\n * Clear existing list style\n * GitHub: index.ts lines 714-728\n */\nfunction clearExistingListStyle(style, selectedText) {\n  let undoResultOpositeList\n  let undoResult\n  let pristineText\n  if (style.orderedList) {\n    undoResult = undoOrderedListStyle(selectedText)\n    undoResultOpositeList = undoUnorderedListStyle(undoResult.text)\n    pristineText = undoResultOpositeList.text\n  } else {\n    undoResult = undoUnorderedListStyle(selectedText)\n    undoResultOpositeList = undoOrderedListStyle(undoResult.text)\n    pristineText = undoResultOpositeList.text\n  }\n  return [undoResult, undoResultOpositeList, pristineText]\n}\n\n/**\n * Apply list style to text\n * GitHub: index.ts lines 730-784\n * CRITICAL: This function modifies the textarea selection via expandSelectionToLine\n */\nexport function listStyle(textarea, style) {\n  const noInitialSelection = textarea.selectionStart === textarea.selectionEnd\n  let selectionStart = textarea.selectionStart\n  let selectionEnd = textarea.selectionEnd\n\n  // Select whole line - MODIFIES textarea.selectionStart and textarea.selectionEnd\n  expandSelectionToLine(textarea)\n\n  const selectedText = textarea.value.slice(textarea.selectionStart, textarea.selectionEnd)\n\n  // If the user intent was to do an undo, we will stop after this.\n  // Otherwise, we will still undo to other list type to prevent list stacking\n  const [undoResult, undoResultOpositeList, pristineText] = clearExistingListStyle(style, selectedText)\n\n  const prefixedLines = pristineText.split('\\n').map((value, index) => {\n    return `${makePrefix(index, style.unorderedList)}${value}`\n  })\n\n  const totalPrefixLength = prefixedLines.reduce((previousValue, _currentValue, currentIndex) => {\n    return previousValue + makePrefix(currentIndex, style.unorderedList).length\n  }, 0)\n\n  const totalPrefixLengthOpositeList = prefixedLines.reduce((previousValue, _currentValue, currentIndex) => {\n    return previousValue + makePrefix(currentIndex, !style.unorderedList).length\n  }, 0)\n\n  if (undoResult.processed) {\n    if (noInitialSelection) {\n      selectionStart = Math.max(selectionStart - makePrefix(0, style.unorderedList).length, 0)\n      selectionEnd = selectionStart\n    } else {\n      selectionStart = textarea.selectionStart\n      selectionEnd = textarea.selectionEnd - totalPrefixLength\n    }\n    return { text: pristineText, selectionStart, selectionEnd }\n  }\n\n  const { newlinesToAppend, newlinesToPrepend } = newlinesToSurroundSelectedText(textarea)\n  const text = newlinesToAppend + prefixedLines.join('\\n') + newlinesToPrepend\n\n  if (noInitialSelection) {\n    selectionStart = Math.max(selectionStart + makePrefix(0, style.unorderedList).length + newlinesToAppend.length, 0)\n    selectionEnd = selectionStart\n  } else {\n    if (undoResultOpositeList.processed) {\n      selectionStart = Math.max(textarea.selectionStart + newlinesToAppend.length, 0)\n      selectionEnd = textarea.selectionEnd + newlinesToAppend.length + totalPrefixLength - totalPrefixLengthOpositeList\n    } else {\n      selectionStart = Math.max(textarea.selectionStart + newlinesToAppend.length, 0)\n      selectionEnd = textarea.selectionEnd + newlinesToAppend.length + totalPrefixLength\n    }\n  }\n\n  return { text, selectionStart, selectionEnd }\n}", "/**\n * Main text styling orchestration\n * EXACT match to GitHub's implementation\n * Based on markdown-toolbar-element index.ts lines 487-500\n */\n\nimport { isMultipleLines } from './selection-new.js'\nimport { insertText } from './insertion-new.js'\nimport { blockStyle, multilineStyle } from '../operations/block-new.js'\nimport { listStyle } from '../operations/list-new.js'\n\n/**\n * Style selected text in textarea\n * GitHub: index.ts lines 487-500\n * CRITICAL: This is the main orchestrator that decides which operation to use\n */\nexport function styleSelectedText(textarea, styleArgs) {\n  const text = textarea.value.slice(textarea.selectionStart, textarea.selectionEnd)\n\n  let result\n  if (styleArgs.orderedList || styleArgs.unorderedList) {\n    result = listStyle(textarea, styleArgs)\n  } else if (styleArgs.multiline && isMultipleLines(text)) {\n    result = multilineStyle(textarea, styleArgs)\n  } else {\n    result = blockStyle(textarea, styleArgs)\n  }\n\n  insertText(textarea, result)\n}", "/**\n * Format detection utilities\n */\n\nimport { FORMATS } from './formats.js'\n\n/**\n * Check if text has a specific format applied\n */\nfunction hasFormatApplied(text, format) {\n  if (!format.prefix) return false\n  \n  if (format.suffix) {\n    return text.startsWith(format.prefix) && text.endsWith(format.suffix)\n  } else {\n    return text.startsWith(format.prefix)\n  }\n}\n\n/**\n * Get active formats at cursor position\n */\nexport function getActiveFormats(textarea) {\n  if (!textarea) return []\n  \n  const formats = []\n  const { selectionStart, selectionEnd, value } = textarea\n  \n  // Get current line for line-based formats\n  const lines = value.split('\\n')\n  let lineStart = 0\n  let currentLine = ''\n  \n  for (const line of lines) {\n    if (selectionStart >= lineStart && selectionStart <= lineStart + line.length) {\n      currentLine = line\n      break\n    }\n    lineStart += line.length + 1\n  }\n  \n  // Check line-based formats\n  if (currentLine.startsWith('- ')) {\n    if (currentLine.startsWith('- [ ] ') || currentLine.startsWith('- [x] ')) {\n      formats.push('task-list')\n    } else {\n      formats.push('bullet-list')\n    }\n  }\n  \n  if (/^\\d+\\.\\s/.test(currentLine)) {\n    formats.push('numbered-list')\n  }\n  \n  if (currentLine.startsWith('> ')) {\n    formats.push('quote')\n  }\n  \n  if (currentLine.startsWith('# ')) formats.push('header')\n  if (currentLine.startsWith('## ')) formats.push('header-2')\n  if (currentLine.startsWith('### ')) formats.push('header-3')\n  \n  // Check inline formats by looking around cursor\n  const lookBehind = Math.max(0, selectionStart - 10)\n  const lookAhead = Math.min(value.length, selectionEnd + 10)\n  const surrounding = value.slice(lookBehind, lookAhead)\n  \n  // Check for bold\n  if (surrounding.includes('**')) {\n    const beforeCursor = value.slice(Math.max(0, selectionStart - 100), selectionStart)\n    const afterCursor = value.slice(selectionEnd, Math.min(value.length, selectionEnd + 100))\n    const lastOpenBold = beforeCursor.lastIndexOf('**')\n    const nextCloseBold = afterCursor.indexOf('**')\n    if (lastOpenBold !== -1 && nextCloseBold !== -1) {\n      formats.push('bold')\n    }\n  }\n  \n  // Check for italic\n  if (surrounding.includes('_')) {\n    const beforeCursor = value.slice(Math.max(0, selectionStart - 100), selectionStart)\n    const afterCursor = value.slice(selectionEnd, Math.min(value.length, selectionEnd + 100))\n    const lastOpenItalic = beforeCursor.lastIndexOf('_')\n    const nextCloseItalic = afterCursor.indexOf('_')\n    if (lastOpenItalic !== -1 && nextCloseItalic !== -1) {\n      formats.push('italic')\n    }\n  }\n  \n  // Check for code\n  if (surrounding.includes('`')) {\n    const beforeCursor = value.slice(Math.max(0, selectionStart - 100), selectionStart)\n    const afterCursor = value.slice(selectionEnd, Math.min(value.length, selectionEnd + 100))\n    if (beforeCursor.includes('`') && afterCursor.includes('`')) {\n      formats.push('code')\n    }\n  }\n  \n  // Check for link\n  if (surrounding.includes('[') && surrounding.includes(']')) {\n    const beforeCursor = value.slice(Math.max(0, selectionStart - 100), selectionStart)\n    const afterCursor = value.slice(selectionEnd, Math.min(value.length, selectionEnd + 100))\n    const lastOpenBracket = beforeCursor.lastIndexOf('[')\n    const nextCloseBracket = afterCursor.indexOf(']')\n    if (lastOpenBracket !== -1 && nextCloseBracket !== -1) {\n      const afterBracket = value.slice(selectionEnd + nextCloseBracket + 1, selectionEnd + nextCloseBracket + 10)\n      if (afterBracket.startsWith('(')) {\n        formats.push('link')\n      }\n    }\n  }\n  \n  return formats\n}\n\n/**\n * Check if specific format is active at cursor\n */\nexport function hasFormat(textarea, format) {\n  const activeFormats = getActiveFormats(textarea)\n  return activeFormats.includes(format)\n}\n\n/**\n * Expand selection based on options\n */\nexport function expandSelection(textarea, options = {}) {\n  if (!textarea) return\n  \n  const { toWord, toLine, toFormat } = options\n  const { selectionStart, selectionEnd, value } = textarea\n  \n  if (toLine) {\n    // Find line boundaries\n    const lines = value.split('\\n')\n    let lineStart = 0\n    let lineEnd = 0\n    let currentPos = 0\n    \n    for (const line of lines) {\n      if (selectionStart >= currentPos && selectionStart <= currentPos + line.length) {\n        lineStart = currentPos\n        lineEnd = currentPos + line.length\n        break\n      }\n      currentPos += line.length + 1\n    }\n    \n    textarea.selectionStart = lineStart\n    textarea.selectionEnd = lineEnd\n  } else if (toWord && selectionStart === selectionEnd) {\n    // Find word boundaries\n    let start = selectionStart\n    let end = selectionEnd\n    \n    // Move start back to word boundary\n    while (start > 0 && !/\\s/.test(value[start - 1])) {\n      start--\n    }\n    \n    // Move end forward to word boundary\n    while (end < value.length && !/\\s/.test(value[end])) {\n      end++\n    }\n    \n    textarea.selectionStart = start\n    textarea.selectionEnd = end\n  }\n}", "/**\n * markdown-actions - Lightweight markdown toolbar functionality\n * Exact implementation matching GitHub's markdown-toolbar-element\n */\n\nimport { mergeStyleWithDefaults } from './core/style-args.js'\nimport { styleSelectedText } from './core/style-text.js'\nimport { setUndoMethod } from './core/insertion-new.js'\nimport { preserveSelection, expandSelectionToLine } from './core/selection-new.js'\nimport { getActiveFormats as getActive, hasFormat as has } from './core/detection.js'\n\n/**\n * Format configurations matching GitHub's manualStyles\n * GitHub: index.ts lines 86-118\n */\nconst FORMATS = {\n  bold: { prefix: '**', suffix: '**', trimFirst: true },\n  italic: { prefix: '_', suffix: '_', trimFirst: true },\n  code: { \n    prefix: '`', \n    suffix: '`', \n    blockPrefix: '```', \n    blockSuffix: '```' \n  },\n  link: { \n    prefix: '[', \n    suffix: '](url)', \n    replaceNext: 'url', \n    scanFor: 'https?://' \n  },\n  quote: { \n    prefix: '> ', \n    multiline: true, \n    surroundWithNewlines: true \n  },\n  bulletList: { \n    prefix: '- ', \n    multiline: true, \n    unorderedList: true \n  },\n  numberedList: { \n    prefix: '1. ', \n    multiline: true, \n    orderedList: true \n  },\n  header1: { prefix: '# ' },\n  header2: { prefix: '## ' },\n  header3: { prefix: '### ' },\n  header4: { prefix: '#### ' },\n  header5: { prefix: '##### ' },\n  header6: { prefix: '###### ' }\n}\n\n/**\n * Apply style to textarea\n * Mimics GitHub's applyStyle function (index.ts lines 801-827)\n */\nfunction applyStyle(textarea, format) {\n  const style = mergeStyleWithDefaults(format)\n  textarea.focus()\n  styleSelectedText(textarea, style)\n}\n\n/**\n * Toggle bold formatting\n */\nexport function toggleBold(textarea) {\n  if (!textarea || textarea.disabled || textarea.readOnly) return\n  applyStyle(textarea, FORMATS.bold)\n}\n\n/**\n * Toggle italic formatting\n */\nexport function toggleItalic(textarea) {\n  if (!textarea || textarea.disabled || textarea.readOnly) return\n  applyStyle(textarea, FORMATS.italic)\n}\n\n/**\n * Toggle code formatting\n */\nexport function toggleCode(textarea) {\n  if (!textarea || textarea.disabled || textarea.readOnly) return\n  applyStyle(textarea, FORMATS.code)\n}\n\n/**\n * Insert or toggle link formatting\n */\nexport function insertLink(textarea, options = {}) {\n  if (!textarea || textarea.disabled || textarea.readOnly) return\n  \n  let format = { ...FORMATS.link }\n  \n  // Override with custom URL if provided\n  if (options.url) {\n    format.suffix = `](${options.url})`\n    format.replaceNext = ''\n  }\n  \n  // Handle custom text if provided\n  if (options.text && !textarea.value.slice(textarea.selectionStart, textarea.selectionEnd)) {\n    const pos = textarea.selectionStart\n    textarea.value = textarea.value.slice(0, pos) + options.text + textarea.value.slice(pos)\n    textarea.selectionStart = pos\n    textarea.selectionEnd = pos + options.text.length\n  }\n  \n  applyStyle(textarea, format)\n}\n\n/**\n * Toggle bullet list formatting\n */\nexport function toggleBulletList(textarea) {\n  if (!textarea || textarea.disabled || textarea.readOnly) return\n  applyStyle(textarea, FORMATS.bulletList)\n}\n\n/**\n * Toggle numbered list formatting\n */\nexport function toggleNumberedList(textarea) {\n  if (!textarea || textarea.disabled || textarea.readOnly) return\n  applyStyle(textarea, FORMATS.numberedList)\n}\n\n/**\n * Toggle quote formatting\n */\nexport function toggleQuote(textarea) {\n  if (!textarea || textarea.disabled || textarea.readOnly) return\n  applyStyle(textarea, FORMATS.quote)\n}\n\n/**\n * Insert header with specific level\n */\nexport function insertHeader(textarea, level = 1) {\n  if (!textarea || textarea.disabled || textarea.readOnly) return\n  if (level < 1 || level > 6) level = 1\n  \n  const headerKey = `header${level}`\n  const format = FORMATS[headerKey] || FORMATS.header1\n  \n  // Select current line\n  const value = textarea.value\n  const start = textarea.selectionStart\n  let lineStart = start\n  let lineEnd = start\n  \n  // Find line boundaries\n  while (lineStart > 0 && value[lineStart - 1] !== '\\n') {\n    lineStart--\n  }\n  while (lineEnd < value.length && value[lineEnd] !== '\\n') {\n    lineEnd++\n  }\n  \n  textarea.selectionStart = lineStart\n  textarea.selectionEnd = lineEnd\n  \n  const currentLine = value.slice(lineStart, lineEnd)\n  \n  // Remove any existing header formatting\n  const cleanedLine = currentLine.replace(/^#{1,6}\\s*/, '')\n  \n  // Apply new header\n  const newLine = format.prefix + cleanedLine\n  \n  // Use our style system\n  const tempSelection = textarea.selectionStart\n  textarea.value = value.slice(0, lineStart) + newLine + value.slice(lineEnd)\n  textarea.selectionStart = lineStart + format.prefix.length\n  textarea.selectionEnd = lineStart + newLine.length\n}\n\n/**\n * Get active formats at cursor position\n */\nexport function getActiveFormats(textarea) {\n  return getActive(textarea)\n}\n\n/**\n * Check if format is active at cursor\n */\nexport function hasFormat(textarea, format) {\n  return has(textarea, format)\n}\n\n/**\n * Expand selection based on options\n */\nexport function expandSelection(textarea, options = {}) {\n  if (!textarea) return\n  \n  const { toWord, toLine } = options\n  const { selectionStart, selectionEnd, value } = textarea\n  \n  if (toLine) {\n    expandSelectionToLine(textarea)\n  } else if (toWord && selectionStart === selectionEnd) {\n    // Find word boundaries\n    let start = selectionStart\n    let end = selectionEnd\n    \n    // Move start back to word boundary\n    while (start > 0 && !/\\s/.test(value[start - 1])) {\n      start--\n    }\n    \n    // Move end forward to word boundary\n    while (end < value.length && !/\\s/.test(value[end])) {\n      end++\n    }\n    \n    textarea.selectionStart = start\n    textarea.selectionEnd = end\n  }\n}\n\n/**\n * Apply custom format\n */\nexport function applyCustomFormat(textarea, format) {\n  if (!textarea || textarea.disabled || textarea.readOnly) return\n  applyStyle(textarea, format)\n}\n\n/**\n * Preserve selection during callback\n */\nexport { preserveSelection }\n\n/**\n * Configure undo method\n */\nexport { setUndoMethod }\n\n/**\n * Default export with all functions\n */\nexport default {\n  toggleBold,\n  toggleItalic,\n  toggleCode,\n  insertLink,\n  toggleBulletList,\n  toggleNumberedList,\n  toggleQuote,\n  insertHeader,\n  getActiveFormats,\n  hasFormat,\n  expandSelection,\n  applyCustomFormat,\n  preserveSelection,\n  setUndoMethod\n}", "/**\n * MarkdownParser - Parses markdown into HTML while preserving character alignment\n * \n * Key principles:\n * - Every character must occupy the exact same position as in the textarea\n * - No font-size changes, no padding/margin on inline elements\n * - Markdown tokens remain visible but styled\n */\nexport class MarkdownParser {\n  /**\n   * Escape HTML special characters\n   * @param {string} text - Raw text to escape\n   * @returns {string} Escaped HTML-safe text\n   */\n  static escapeHtml(text) {\n    const map = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;'\n    };\n    return text.replace(/[&<>\"']/g, m => map[m]);\n  }\n\n  /**\n   * Preserve leading spaces as non-breaking spaces\n   * @param {string} html - HTML string\n   * @param {string} originalLine - Original line with spaces\n   * @returns {string} HTML with preserved indentation\n   */\n  static preserveIndentation(html, originalLine) {\n    const leadingSpaces = originalLine.match(/^(\\s*)/)[1];\n    const indentation = leadingSpaces.replace(/ /g, '&nbsp;');\n    return html.replace(/^\\s*/, indentation);\n  }\n\n  /**\n   * Parse headers (h1-h3 only)\n   * @param {string} html - HTML line to parse\n   * @returns {string} Parsed HTML with header styling\n   */\n  static parseHeader(html) {\n    return html.replace(/^(#{1,3})\\s(.+)$/, (match, hashes, content) => {\n      const level = hashes.length;\n      const levelClasses = ['h1', 'h2', 'h3'];\n      return `<span class=\"header ${levelClasses[level-1]}\"><span class=\"syntax-marker\">${hashes}</span> ${content}</span>`;\n    });\n  }\n\n  /**\n   * Parse horizontal rules\n   * @param {string} html - HTML line to parse\n   * @returns {string|null} Parsed horizontal rule or null\n   */\n  static parseHorizontalRule(html) {\n    if (html.match(/^(-{3,}|\\*{3,}|_{3,})$/)) {\n      return `<div><span class=\"hr-marker\">${html}</span></div>`;\n    }\n    return null;\n  }\n\n  /**\n   * Parse blockquotes\n   * @param {string} html - HTML line to parse\n   * @returns {string} Parsed blockquote\n   */\n  static parseBlockquote(html) {\n    return html.replace(/^&gt; (.+)$/, (match, content) => {\n      return `<span class=\"blockquote\"><span class=\"syntax-marker\">&gt;</span> ${content}</span>`;\n    });\n  }\n\n  /**\n   * Parse bullet lists\n   * @param {string} html - HTML line to parse\n   * @returns {string} Parsed bullet list item\n   */\n  static parseBulletList(html) {\n    return html.replace(/^((?:&nbsp;)*)([-*])\\s(.+)$/, (match, indent, marker, content) => {\n      return `${indent}<span class=\"syntax-marker\">${marker}</span> ${content}`;\n    });\n  }\n\n  /**\n   * Parse numbered lists\n   * @param {string} html - HTML line to parse\n   * @returns {string} Parsed numbered list item\n   */\n  static parseNumberedList(html) {\n    return html.replace(/^((?:&nbsp;)*)(\\d+\\.)\\s(.+)$/, (match, indent, marker, content) => {\n      return `${indent}<span class=\"syntax-marker\">${marker}</span> ${content}`;\n    });\n  }\n\n  /**\n   * Parse code blocks (markers only)\n   * @param {string} html - HTML line to parse\n   * @returns {string|null} Parsed code fence or null\n   */\n  static parseCodeBlock(html) {\n    if (html.startsWith('```')) {\n      return `<div><span class=\"code-fence\">${html}</span></div>`;\n    }\n    return null;\n  }\n\n  /**\n   * Parse bold text\n   * @param {string} html - HTML with potential bold markdown\n   * @returns {string} HTML with bold styling\n   */\n  static parseBold(html) {\n    html = html.replace(/\\*\\*(.+?)\\*\\*/g, '<strong><span class=\"syntax-marker\">**</span>$1<span class=\"syntax-marker\">**</span></strong>');\n    html = html.replace(/__(.+?)__/g, '<strong><span class=\"syntax-marker\">__</span>$1<span class=\"syntax-marker\">__</span></strong>');\n    return html;\n  }\n\n  /**\n   * Parse italic text\n   * Note: Uses lookbehind assertions - requires modern browsers\n   * @param {string} html - HTML with potential italic markdown\n   * @returns {string} HTML with italic styling\n   */\n  static parseItalic(html) {\n    html = html.replace(/(?<!\\*)\\*(?!\\*)(.+?)(?<!\\*)\\*(?!\\*)/g, '<em><span class=\"syntax-marker\">*</span>$1<span class=\"syntax-marker\">*</span></em>');\n    html = html.replace(/(?<!_)_(?!_)(.+?)(?<!_)_(?!_)/g, '<em><span class=\"syntax-marker\">_</span>$1<span class=\"syntax-marker\">_</span></em>');\n    return html;\n  }\n\n  /**\n   * Parse inline code\n   * @param {string} html - HTML with potential code markdown\n   * @returns {string} HTML with code styling\n   */\n  static parseInlineCode(html) {\n    return html.replace(/`(.+?)`/g, '<code><span class=\"syntax-marker\">`</span>$1<span class=\"syntax-marker\">`</span></code>');\n  }\n\n  /**\n   * Parse links\n   * @param {string} html - HTML with potential link markdown\n   * @returns {string} HTML with link styling\n   */\n  static parseLinks(html) {\n    return html.replace(/\\[(.+?)\\]\\((.+?)\\)/g, '<a href=\"$2\"><span class=\"syntax-marker\">[</span>$1<span class=\"syntax-marker\">](</span><span class=\"syntax-marker\">$2</span><span class=\"syntax-marker\">)</span></a>');\n  }\n\n  /**\n   * Parse all inline elements in correct order\n   * @param {string} text - Text with potential inline markdown\n   * @returns {string} HTML with all inline styling\n   */\n  static parseInlineElements(text) {\n    let html = text;\n    // Order matters: parse code first to avoid conflicts\n    html = this.parseInlineCode(html);\n    html = this.parseLinks(html);\n    html = this.parseBold(html);\n    html = this.parseItalic(html);\n    return html;\n  }\n\n  /**\n   * Parse a single line of markdown\n   * @param {string} line - Raw markdown line\n   * @returns {string} Parsed HTML line\n   */\n  static parseLine(line) {\n    let html = this.escapeHtml(line);\n    \n    // Preserve indentation\n    html = this.preserveIndentation(html, line);\n    \n    // Check for block elements first\n    const horizontalRule = this.parseHorizontalRule(html);\n    if (horizontalRule) return horizontalRule;\n    \n    const codeBlock = this.parseCodeBlock(html);\n    if (codeBlock) return codeBlock;\n    \n    // Parse block elements\n    html = this.parseHeader(html);\n    html = this.parseBlockquote(html);\n    html = this.parseBulletList(html);\n    html = this.parseNumberedList(html);\n    \n    // Parse inline elements\n    html = this.parseInlineElements(html);\n    \n    // Wrap in div to maintain line structure\n    if (html.trim() === '') {\n      return '<div>&nbsp;</div>';\n    }\n    \n    return `<div>${html}</div>`;\n  }\n\n  /**\n   * Parse full markdown text\n   * @param {string} text - Full markdown text\n   * @param {number} activeLine - Currently active line index (optional)\n   * @param {boolean} showActiveLineRaw - Show raw markdown on active line\n   * @returns {string} Parsed HTML\n   */\n  static parse(text, activeLine = -1, showActiveLineRaw = false) {\n    const lines = text.split('\\n');\n    const parsedLines = lines.map((line, index) => {\n      // Show raw markdown on active line if requested\n      if (showActiveLineRaw && index === activeLine) {\n        const content = this.escapeHtml(line) || '&nbsp;';\n        return `<div class=\"raw-line\">${content}</div>`;\n      }\n      \n      // Otherwise, parse the markdown normally\n      return this.parseLine(line);\n    });\n    \n    // Join without newlines to prevent extra spacing\n    return parsedLines.join('');\n  }\n}", "/**\n * Keyboard shortcuts handler for OverType editor\n */\n\n/**\n * ShortcutsManager - Handles keyboard shortcuts for the editor\n */\nexport class ShortcutsManager {\n  constructor(editor) {\n    this.editor = editor;\n    this.textarea = editor.textarea;\n    this.shortcuts = new Map();\n    \n    // Register default shortcuts\n    this.registerDefaults();\n  }\n\n  /**\n   * Register default keyboard shortcuts\n   */\n  registerDefaults() {\n    // Bold - Cmd/Ctrl+B\n    this.register('b', false, () => {\n      this.wrapSelection('**');\n    });\n\n    // Italic - Cmd/Ctrl+I\n    this.register('i', false, () => {\n      this.wrapSelection('*');\n    });\n\n    // Bullet list - Cmd/Ctrl+Shift+8\n    this.register('8', true, () => {\n      this.toggleList('bullet');\n    });\n\n    // Numbered list - Cmd/Ctrl+Shift+7\n    this.register('7', true, () => {\n      this.toggleList('number');\n    });\n\n    // Code - Cmd/Ctrl+K\n    this.register('k', false, () => {\n      this.wrapSelection('`');\n    });\n\n    // Link - Cmd/Ctrl+Shift+K\n    this.register('k', true, () => {\n      this.insertLink();\n    });\n  }\n\n  /**\n   * Register a custom keyboard shortcut\n   * @param {string} key - The key to bind\n   * @param {boolean} shift - Whether shift is required\n   * @param {Function} handler - The handler function\n   */\n  register(key, shift, handler) {\n    const shortcutKey = `${shift ? 'shift+' : ''}${key.toLowerCase()}`;\n    this.shortcuts.set(shortcutKey, handler);\n  }\n\n  /**\n   * Handle keydown events\n   * @param {KeyboardEvent} event - The keyboard event\n   * @returns {boolean} Whether the event was handled\n   */\n  handleKeydown(event) {\n    const isMac = navigator.platform.toLowerCase().includes('mac');\n    const modKey = isMac ? event.metaKey : event.ctrlKey;\n\n    if (!modKey) return false;\n\n    const shortcutKey = `${event.shiftKey ? 'shift+' : ''}${event.key.toLowerCase()}`;\n    const handler = this.shortcuts.get(shortcutKey);\n\n    if (handler) {\n      event.preventDefault();\n      handler.call(this);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Wrap selected text with markers\n   * @param {string} before - Marker to add before\n   * @param {string} after - Marker to add after (defaults to before)\n   */\n  wrapSelection(before, after = before) {\n    const start = this.textarea.selectionStart;\n    const end = this.textarea.selectionEnd;\n    const value = this.textarea.value;\n    const selectedText = value.slice(start, end);\n\n    // Check if already wrapped and unwrap if so\n    if (selectedText.startsWith(before) && selectedText.endsWith(after) && \n        selectedText.length >= before.length + after.length) {\n      const inner = selectedText.slice(before.length, selectedText.length - after.length);\n      this.textarea.setRangeText(inner, start, end, 'end');\n      this.editor.updatePreview();\n      return;\n    }\n\n    // Otherwise wrap the selection\n    this.textarea.setRangeText(before + selectedText + after, start, end, 'end');\n    this.editor.updatePreview();\n  }\n\n  /**\n   * Toggle list formatting\n   * @param {string} type - 'bullet' or 'number'\n   */\n  toggleList(type) {\n    const value = this.textarea.value;\n    const start = this.textarea.selectionStart;\n    const end = this.textarea.selectionEnd;\n\n    // Find line boundaries\n    const lineStart = value.lastIndexOf('\\n', start - 1) + 1;\n    const lineEnd = value.indexOf('\\n', end) === -1 ? value.length : value.indexOf('\\n', end);\n    const block = value.slice(lineStart, lineEnd);\n    const lines = block.split('\\n');\n\n    let transformed;\n    if (type === 'bullet') {\n      transformed = lines.map(line => {\n        // Toggle bullet: remove if present, add if not\n        if (/^\\s*[-*]\\s+/.test(line)) {\n          return line.replace(/^(\\s*)[-*]\\s+/, '$1');\n        }\n        return line.replace(/^(\\s*)/, '$1- ');\n      }).join('\\n');\n    } else if (type === 'number') {\n      transformed = lines.map((line, i) => {\n        // Toggle numbering: remove if present, add if not\n        if (/^\\s*\\d+\\.\\s+/.test(line)) {\n          return line.replace(/^(\\s*)\\d+\\.\\s+/, '$1');\n        }\n        return line.replace(/^(\\s*)/, `$1${i + 1}. `);\n      }).join('\\n');\n    }\n\n    this.textarea.setRangeText(transformed, lineStart, lineEnd, 'end');\n    this.editor.updatePreview();\n  }\n\n  /**\n   * Insert a link at cursor position\n   */\n  insertLink() {\n    const start = this.textarea.selectionStart;\n    const end = this.textarea.selectionEnd;\n    const selectedText = this.textarea.value.slice(start, end);\n    \n    // If text is selected, use it as link text\n    const linkText = selectedText || 'link text';\n    const linkMarkdown = `[${linkText}](url)`;\n    \n    this.textarea.setRangeText(linkMarkdown, start, end, 'end');\n    \n    // Position cursor inside the URL part\n    if (!selectedText) {\n      this.textarea.setSelectionRange(start + 1, start + 1 + linkText.length);\n    } else {\n      const urlStart = start + linkMarkdown.indexOf('(url)') + 1;\n      this.textarea.setSelectionRange(urlStart, urlStart + 3);\n    }\n    \n    this.editor.updatePreview();\n    this.textarea.focus();\n  }\n\n  /**\n   * Insert header at the beginning of current line\n   * @param {number} level - Header level (1-3)\n   */\n  insertHeader(level) {\n    const value = this.textarea.value;\n    const start = this.textarea.selectionStart;\n    \n    // Find line boundaries\n    const lineStart = value.lastIndexOf('\\n', start - 1) + 1;\n    const lineEnd = value.indexOf('\\n', start) === -1 ? value.length : value.indexOf('\\n', start);\n    const line = value.slice(lineStart, lineEnd);\n    \n    // Check if line already has header\n    const headerMatch = line.match(/^(#{1,3})\\s/);\n    if (headerMatch) {\n      // Remove or change header level\n      if (headerMatch[1].length === level) {\n        // Remove header\n        const newLine = line.replace(/^#{1,3}\\s/, '');\n        this.textarea.setRangeText(newLine, lineStart, lineEnd, 'end');\n      } else {\n        // Change header level\n        const newLine = line.replace(/^#{1,3}/, '#'.repeat(level));\n        this.textarea.setRangeText(newLine, lineStart, lineEnd, 'end');\n      }\n    } else {\n      // Add header\n      const newLine = '#'.repeat(level) + ' ' + line;\n      this.textarea.setRangeText(newLine, lineStart, lineEnd, 'end');\n    }\n    \n    this.editor.updatePreview();\n  }\n\n  /**\n   * Cleanup event listeners\n   */\n  destroy() {\n    this.shortcuts.clear();\n  }\n}", "/**\n * Built-in themes for OverType editor\n * Each theme provides a complete color palette for the editor\n */\n\n/**\n * Solar theme - Light, warm and bright\n */\nexport const solar = {\n  name: 'solar',\n  colors: {\n    bgPrimary: '#faf0ca',        // Lemon Chiffon - main background\n    bgSecondary: '#ffffff',      // White - editor background\n    text: '#0d3b66',             // Yale Blue - main text\n    h1: '#f95738',               // Tomato - h1 headers\n    h2: '#ee964b',               // Sandy Brown - h2 headers  \n    h3: '#3d8a51',               // Forest green - h3 headers\n    strong: '#ee964b',           // Sandy Brown - bold text\n    em: '#f95738',               // Tomato - italic text\n    link: '#0d3b66',             // Yale Blue - links\n    code: '#0d3b66',             // Yale Blue - inline code\n    codeBg: 'rgba(244, 211, 94, 0.4)', // Naples Yellow with transparency\n    blockquote: '#5a7a9b',       // Muted blue - blockquotes\n    hr: '#5a7a9b',               // Muted blue - horizontal rules\n    syntaxMarker: 'rgba(13, 59, 102, 0.52)', // Yale Blue with transparency\n    cursor: '#f95738',           // Tomato - cursor\n    selection: 'rgba(244, 211, 94, 0.4)', // Naples Yellow with transparency\n    listMarker: '#ee964b',       // Sandy Brown - list markers\n  }\n};\n\n/**\n * Cave theme - Dark ocean depths\n */\nexport const cave = {\n  name: 'cave',\n  colors: {\n    bgPrimary: '#141E26',        // Deep ocean - main background\n    bgSecondary: '#1D2D3E',      // Darker charcoal - editor background\n    text: '#c5dde8',             // Light blue-gray - main text\n    h1: '#d4a5ff',               // Rich lavender - h1 headers\n    h2: '#f6ae2d',               // Hunyadi Yellow - h2 headers\n    h3: '#9fcfec',               // Brighter blue - h3 headers\n    strong: '#f6ae2d',           // Hunyadi Yellow - bold text\n    em: '#9fcfec',               // Brighter blue - italic text\n    link: '#9fcfec',             // Brighter blue - links\n    code: '#c5dde8',             // Light blue-gray - inline code\n    codeBg: '#1a232b',           // Very dark blue - code background\n    blockquote: '#9fcfec',       // Brighter blue - same as italic\n    hr: '#c5dde8',               // Light blue-gray - horizontal rules\n    syntaxMarker: 'rgba(159, 207, 236, 0.73)', // Brighter blue semi-transparent\n    cursor: '#f26419',           // Orange Pantone - cursor\n    selection: 'rgba(51, 101, 138, 0.4)', // Lapis Lazuli with transparency\n    listMarker: '#f6ae2d',       // Hunyadi Yellow - list markers\n  }\n};\n\n/**\n * Default themes registry\n */\nexport const themes = {\n  solar,\n  cave,\n  // Aliases for backward compatibility\n  light: solar,\n  dark: cave\n};\n\n/**\n * Get theme by name or return custom theme object\n * @param {string|Object} theme - Theme name or custom theme object\n * @returns {Object} Theme configuration\n */\nexport function getTheme(theme) {\n  if (typeof theme === 'string') {\n    const themeObj = themes[theme] || themes.solar;\n    // Preserve the requested theme name (important for 'light' and 'dark' aliases)\n    return { ...themeObj, name: theme };\n  }\n  return theme;\n}\n\n/**\n * Apply theme colors to CSS variables\n * @param {Object} colors - Theme colors object\n * @returns {string} CSS custom properties string\n */\nexport function themeToCSSVars(colors) {\n  const vars = [];\n  for (const [key, value] of Object.entries(colors)) {\n    // Convert camelCase to kebab-case\n    const varName = key.replace(/([A-Z])/g, '-$1').toLowerCase();\n    vars.push(`--${varName}: ${value};`);\n  }\n  return vars.join('\\n');\n}\n\n/**\n * Merge custom colors with base theme\n * @param {Object} baseTheme - Base theme object\n * @param {Object} customColors - Custom color overrides\n * @returns {Object} Merged theme object\n */\nexport function mergeTheme(baseTheme, customColors = {}) {\n  return {\n    ...baseTheme,\n    colors: {\n      ...baseTheme.colors,\n      ...customColors\n    }\n  };\n}", "/**\n * CSS styles for OverType editor\n * Embedded in JavaScript to ensure single-file distribution\n */\n\nimport { themeToCSSVars } from './themes.js';\n\n/**\n * Generate the complete CSS for the editor\n * @param {Object} options - Configuration options\n * @returns {string} Complete CSS string\n */\nexport function generateStyles(options = {}) {\n  const {\n    fontSize = '14px',\n    lineHeight = 1.6,\n    fontFamily = \"'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace\",\n    padding = '20px',\n    theme = null,\n    mobile = {}\n  } = options;\n\n  // Generate mobile overrides\n  const mobileStyles = Object.keys(mobile).length > 0 ? `\n    @media (max-width: 640px) {\n      .overtype-wrapper .overtype-input,\n      .overtype-wrapper .overtype-preview {\n        ${Object.entries(mobile)\n          .map(([prop, val]) => {\n            const cssProp = prop.replace(/([A-Z])/g, '-$1').toLowerCase();\n            return `${cssProp}: ${val} !important;`;\n          })\n          .join('\\n        ')}\n      }\n    }\n  ` : '';\n\n  // Generate theme variables if provided\n  const themeVars = theme && theme.colors ? themeToCSSVars(theme.colors) : '';\n\n  return `\n    /* OverType Editor Styles */\n    .overtype-wrapper {\n      position: relative !important;\n      width: 100% !important;\n      height: 100% !important;\n      overflow: hidden !important;\n      background: var(--bg-secondary, #ffffff) !important;\n      ${themeVars ? `\n      /* Theme Variables */\n      ${themeVars}` : ''}\n    }\n\n    /* Critical alignment styles - must be identical for both layers */\n    .overtype-wrapper .overtype-input,\n    .overtype-wrapper .overtype-preview {\n      /* Positioning - must be identical */\n      position: absolute !important;\n      top: 0 !important;\n      left: 0 !important;\n      width: 100% !important;\n      height: 100% !important;\n      \n      /* Font properties - any difference breaks alignment */\n      font-family: ${fontFamily} !important;\n      font-size: var(--instance-font-size, ${fontSize}) !important;\n      line-height: var(--instance-line-height, ${lineHeight}) !important;\n      font-weight: normal !important;\n      font-style: normal !important;\n      font-variant: normal !important;\n      font-stretch: normal !important;\n      font-kerning: none !important;\n      font-feature-settings: normal !important;\n      \n      /* Box model - must match exactly */\n      padding: var(--instance-padding, ${padding}) !important;\n      margin: 0 !important;\n      border: none !important;\n      outline: none !important;\n      box-sizing: border-box !important;\n      \n      /* Text layout - critical for character positioning */\n      white-space: pre-wrap !important;\n      word-wrap: break-word !important;\n      word-break: normal !important;\n      overflow-wrap: break-word !important;\n      tab-size: 2 !important;\n      -moz-tab-size: 2 !important;\n      text-align: left !important;\n      text-indent: 0 !important;\n      letter-spacing: normal !important;\n      word-spacing: normal !important;\n      \n      /* Text rendering */\n      text-transform: none !important;\n      text-rendering: auto !important;\n      -webkit-font-smoothing: auto !important;\n      -webkit-text-size-adjust: 100% !important;\n      \n      /* Direction and writing */\n      direction: ltr !important;\n      writing-mode: horizontal-tb !important;\n      unicode-bidi: normal !important;\n      text-orientation: mixed !important;\n      \n      /* Visual effects that could shift perception */\n      text-shadow: none !important;\n      filter: none !important;\n      transform: none !important;\n      zoom: 1 !important;\n      \n      /* Vertical alignment */\n      vertical-align: baseline !important;\n      \n      /* Size constraints */\n      min-width: 0 !important;\n      min-height: 0 !important;\n      max-width: none !important;\n      max-height: none !important;\n      \n      /* Overflow */\n      overflow-y: auto !important;\n      overflow-x: auto !important;\n      scrollbar-width: auto !important;\n      scrollbar-gutter: auto !important;\n      \n      /* Animation/transition - disabled to prevent movement */\n      animation: none !important;\n      transition: none !important;\n    }\n\n    /* Input layer styles */\n    .overtype-wrapper .overtype-input {\n      /* Layer positioning */\n      z-index: 1 !important;\n      \n      /* Text visibility */\n      color: transparent !important;\n      caret-color: var(--cursor, #f95738) !important;\n      background-color: transparent !important;\n      \n      /* Textarea-specific */\n      resize: none !important;\n      appearance: none !important;\n      -webkit-appearance: none !important;\n      -moz-appearance: none !important;\n      \n      /* Prevent mobile zoom on focus */\n      touch-action: manipulation !important;\n      \n      /* Disable autofill and spellcheck */\n      autocomplete: off !important;\n      autocorrect: off !important;\n      autocapitalize: off !important;\n      spellcheck: false !important;\n    }\n\n    .overtype-wrapper .overtype-input::selection {\n      background-color: var(--selection, rgba(244, 211, 94, 0.4));\n    }\n\n    /* Preview layer styles */\n    .overtype-wrapper .overtype-preview {\n      /* Layer positioning */\n      z-index: 0 !important;\n      pointer-events: none !important;\n      color: var(--text, #0d3b66) !important;\n      background-color: transparent !important;\n      \n      /* Prevent text selection */\n      user-select: none !important;\n      -webkit-user-select: none !important;\n      -moz-user-select: none !important;\n      -ms-user-select: none !important;\n    }\n\n    /* Defensive styles for preview child divs */\n    .overtype-wrapper .overtype-preview div {\n      /* Reset any inherited styles */\n      margin: 0 !important;\n      padding: 0 !important;\n      border: none !important;\n      text-align: left !important;\n      text-indent: 0 !important;\n      display: block !important;\n      position: static !important;\n      transform: none !important;\n      min-height: 0 !important;\n      max-height: none !important;\n      line-height: inherit !important;\n      font-size: inherit !important;\n      font-family: inherit !important;\n    }\n\n    /* Markdown element styling - NO SIZE CHANGES */\n    .overtype-wrapper .overtype-preview .header {\n      font-weight: bold !important;\n    }\n\n    /* Header colors */\n    .overtype-wrapper .overtype-preview .h1 { \n      color: var(--h1, #f95738) !important; \n    }\n    .overtype-wrapper .overtype-preview .h2 { \n      color: var(--h2, #ee964b) !important; \n    }\n    .overtype-wrapper .overtype-preview .h3 { \n      color: var(--h3, #3d8a51) !important; \n    }\n\n    /* Bold text */\n    .overtype-wrapper .overtype-preview strong {\n      color: var(--strong, #ee964b) !important;\n      font-weight: bold !important;\n    }\n\n    /* Italic text */\n    .overtype-wrapper .overtype-preview em {\n      color: var(--em, #f95738) !important;\n      text-decoration-color: var(--em, #f95738) !important;\n      text-decoration-thickness: 1px !important;\n      font-style: italic !important;\n    }\n\n    /* Inline code */\n    .overtype-wrapper .overtype-preview code {\n      background: var(--code-bg, rgba(244, 211, 94, 0.4)) !important;\n      color: var(--code, #0d3b66) !important;\n      padding: 0 !important;\n      border-radius: 2px !important;\n      font-family: inherit !important;\n      font-weight: normal !important;\n    }\n\n    /* Code blocks */\n    .overtype-wrapper .overtype-preview pre {\n      background: #1e1e1e !important;\n      padding: 0 !important;\n      margin: 0 !important;\n      border-radius: 4px !important;\n      overflow-x: auto !important;\n    }\n\n    .overtype-wrapper .overtype-preview pre code {\n      background: none !important;\n    }\n\n    /* Blockquotes */\n    .overtype-wrapper .overtype-preview .blockquote {\n      color: var(--blockquote, #5a7a9b) !important;\n      padding: 0 !important;\n      margin: 0 !important;\n      border: none !important;\n    }\n\n    /* Links */\n    .overtype-wrapper .overtype-preview a {\n      color: var(--link, #0d3b66) !important;\n      text-decoration: underline !important;\n      font-weight: normal !important;\n    }\n\n    .overtype-wrapper .overtype-preview a:hover {\n      text-decoration: underline !important;\n      color: var(--link, #0d3b66) !important;\n    }\n\n    /* Lists - no list styling */\n    .overtype-wrapper .overtype-preview ul,\n    .overtype-wrapper .overtype-preview ol {\n      list-style: none !important;\n      margin: 0 !important;\n      padding: 0 !important;\n    }\n\n    .overtype-wrapper .overtype-preview li {\n      margin: 0 !important;\n      padding: 0 !important;\n      list-style: none !important;\n    }\n\n    /* Horizontal rules */\n    .overtype-wrapper .overtype-preview hr {\n      border: none !important;\n      color: var(--hr, #5a7a9b) !important;\n      margin: 0 !important;\n      padding: 0 !important;\n    }\n\n    .overtype-wrapper .overtype-preview .hr-marker {\n      color: var(--hr, #5a7a9b) !important;\n      opacity: 0.6 !important;\n    }\n\n    /* Code fence markers - with background when not in code block */\n    .overtype-wrapper .overtype-preview .code-fence {\n      color: var(--code, #0d3b66) !important;\n      background: var(--code-bg, rgba(244, 211, 94, 0.4)) !important;\n    }\n    \n    /* Code block lines - background for entire code block */\n    .overtype-wrapper .overtype-preview .code-block-line {\n      background: var(--code-bg, rgba(244, 211, 94, 0.4)) !important;\n    }\n    \n    /* Remove background from code fence when inside code block line */\n    .overtype-wrapper .overtype-preview .code-block-line .code-fence {\n      background: transparent !important;\n    }\n\n    /* Raw markdown line */\n    .overtype-wrapper .overtype-preview .raw-line {\n      color: var(--raw-line, #5a7a9b) !important;\n      font-style: normal !important;\n      font-weight: normal !important;\n    }\n\n    /* Syntax markers */\n    .overtype-wrapper .overtype-preview .syntax-marker {\n      color: var(--syntax-marker, rgba(13, 59, 102, 0.52)) !important;\n      opacity: 0.7 !important;\n    }\n\n    /* List markers */\n    .overtype-wrapper .overtype-preview .list-marker {\n      color: var(--list-marker, #ee964b) !important;\n    }\n\n    /* Stats bar */\n    .overtype-wrapper.with-stats {\n      padding-bottom: 40px !important;\n    }\n    \n    .overtype-wrapper .overtype-stats {\n      position: absolute !important;\n      bottom: 0 !important;\n      left: 0 !important;\n      right: 0 !important;\n      height: 40px !important;\n      padding: 0 20px !important;\n      background: #f8f9fa !important;\n      border-top: 1px solid #e0e0e0 !important;\n      display: flex !important;\n      justify-content: space-between !important;\n      align-items: center !important;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;\n      font-size: 0.85rem !important;\n      color: #666 !important;\n      z-index: 2 !important;\n    }\n    \n    /* Dark theme stats bar */\n    .overtype-wrapper[data-theme=\"cave\"] .overtype-stats {\n      background: var(--bg-secondary, #1D2D3E) !important;\n      border-top: 1px solid rgba(197, 221, 232, 0.1) !important;\n      color: var(--text, #c5dde8) !important;\n    }\n    \n    .overtype-wrapper .overtype-stats .overtype-stat {\n      display: flex !important;\n      align-items: center !important;\n      gap: 5px !important;\n      white-space: nowrap !important;\n    }\n    \n    .overtype-wrapper .overtype-stats .live-dot {\n      width: 8px !important;\n      height: 8px !important;\n      background: #4caf50 !important;\n      border-radius: 50% !important;\n      animation: pulse 2s infinite !important;\n    }\n    \n    @keyframes pulse {\n      0%, 100% { opacity: 1; transform: scale(1); }\n      50% { opacity: 0.6; transform: scale(1.2); }\n    }\n    \n    /* Adjust textarea and preview for stats bar */\n    .overtype-wrapper.with-stats .overtype-input,\n    .overtype-wrapper.with-stats .overtype-preview {\n      height: calc(100% - 40px) !important;\n    }\n\n    /* Toolbar Styles */\n    .overtype-toolbar {\n      display: flex;\n      align-items: center;\n      gap: 4px;\n      padding: 8px;\n      background: var(--bg-primary, #f8f9fa);\n      border: 1px solid var(--border, #e0e0e0);\n      border-bottom: none;\n      border-radius: 8px 8px 0 0;\n      overflow-x: auto;\n      -webkit-overflow-scrolling: touch;\n    }\n\n    .overtype-toolbar-button {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 32px;\n      height: 32px;\n      padding: 0;\n      border: none;\n      border-radius: 6px;\n      background: transparent;\n      color: var(--text-secondary, #666);\n      cursor: pointer;\n      transition: all 0.2s ease;\n      flex-shrink: 0;\n    }\n\n    .overtype-toolbar-button svg {\n      width: 20px;\n      height: 20px;\n      fill: currentColor;\n    }\n    \n    /* Special sizing for code block icon */\n    .overtype-toolbar-button[data-action=\"insertCodeBlock\"] svg {\n      width: 24px;\n      height: 18px;\n      fill: transparent !important;\n    }\n\n    .overtype-toolbar-button:hover {\n      background: var(--bg-secondary, #e9ecef);\n      color: var(--text-primary, #333);\n    }\n\n    .overtype-toolbar-button:active {\n      transform: scale(0.95);\n    }\n\n    .overtype-toolbar-button.active {\n      background: var(--primary, #007bff);\n      color: white;\n    }\n\n    .overtype-toolbar-button:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n\n    .overtype-toolbar-separator {\n      width: 1px;\n      height: 24px;\n      background: var(--border, #e0e0e0);\n      margin: 0 4px;\n      flex-shrink: 0;\n    }\n\n    /* Adjust wrapper when toolbar is present */\n    .overtype-toolbar + .overtype-wrapper {\n      border-radius: 0 0 8px 8px;\n      border-top: none;\n    }\n\n    /* Mobile toolbar adjustments */\n    @media (max-width: 640px) {\n      .overtype-toolbar {\n        padding: 6px;\n        gap: 2px;\n      }\n\n      .overtype-toolbar-button {\n        width: 36px;\n        height: 36px;\n      }\n\n      .overtype-toolbar-separator {\n        margin: 0 2px;\n      }\n    }\n\n    ${mobileStyles}\n  `;\n}", "/**\n * SVG icons for OverType toolbar\n * Quill-style icons with inline styles\n */\n\nexport const boldIcon = `<svg viewBox=\"0 0 18 18\">\n  <path stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z\"></path>\n  <path stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z\"></path>\n</svg>`;\n\nexport const italicIcon = `<svg viewBox=\"0 0 18 18\">\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" x1=\"7\" x2=\"13\" y1=\"4\" y2=\"4\"></line>\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" x1=\"5\" x2=\"11\" y1=\"14\" y2=\"14\"></line>\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" x1=\"8\" x2=\"10\" y1=\"14\" y2=\"4\"></line>\n</svg>`;\n\nexport const h1Icon = `<svg viewBox=\"0 0 18 18\">\n  <path fill=\"currentColor\" d=\"M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z\"></path>\n</svg>`;\n\nexport const h2Icon = `<svg viewBox=\"0 0 18 18\">\n  <path fill=\"currentColor\" d=\"M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z\"></path>\n</svg>`;\n\nexport const h3Icon = `<svg viewBox=\"0 0 18 18\">\n  <path fill=\"currentColor\" d=\"M16.65186,12.30664a2.6742,2.6742,0,0,1-2.915,2.68457,3.96592,3.96592,0,0,1-2.25537-.6709.56007.56007,0,0,1-.13232-.83594L11.64648,13c.209-.34082.48389-.36328.82471-.1543a2.32654,2.32654,0,0,0,1.12256.33008c.71484,0,1.12207-.35156,1.12207-.78125,0-.61523-.61621-.86816-1.46338-.86816H13.2085a.65159.65159,0,0,1-.68213-.41895l-.05518-.10937a.67114.67114,0,0,1,.14307-.78125l.71533-.86914a8.55289,8.55289,0,0,1,.68213-.7373V8.58887a3.93913,3.93913,0,0,1-.748.05469H11.9873a.54085.54085,0,0,1-.605-.60547V7.59863a.54085.54085,0,0,1,.605-.60547h3.75146a.53773.53773,0,0,1,.60547.59375v.17676a1.03723,1.03723,0,0,1-.27539.748L14.74854,10.0293A2.31132,2.31132,0,0,1,16.65186,12.30664ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z\"></path>\n</svg>`;\n\nexport const linkIcon = `<svg viewBox=\"0 0 18 18\">\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" x1=\"7\" x2=\"11\" y1=\"7\" y2=\"11\"></line>\n  <path stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z\"></path>\n  <path stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z\"></path>\n</svg>`;\n\nexport const codeIcon = `<svg viewBox=\"0 0 18 18\">\n  <polyline stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" points=\"5 7 3 9 5 11\"></polyline>\n  <polyline stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" points=\"13 7 15 9 13 11\"></polyline>\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" x1=\"10\" x2=\"8\" y1=\"5\" y2=\"13\"></line>\n</svg>`;\n\nexport const codeBlockIcon = `<svg viewBox=\"0 0 46 33\" fill=\"transparent\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M35 8h3a5 5 0 0 1 5 5v12a5 5 0 0 1-5 5H18a5 5 0 0 1-5-5v-2\" stroke=\"currentColor\" stroke-width=\"4\" stroke-linecap=\"round\"></path>\n  <path d=\"m9 2.5-6 6L9 14M20 2.5l6 6-6 5.5\" stroke=\"currentColor\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n</svg>`;\n\nexport const bulletListIcon = `<svg viewBox=\"0 0 18 18\">\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" x1=\"6\" x2=\"15\" y1=\"4\" y2=\"4\"></line>\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" x1=\"6\" x2=\"15\" y1=\"9\" y2=\"9\"></line>\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" x1=\"6\" x2=\"15\" y1=\"14\" y2=\"14\"></line>\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" x1=\"3\" x2=\"3\" y1=\"4\" y2=\"4\"></line>\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" x1=\"3\" x2=\"3\" y1=\"9\" y2=\"9\"></line>\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" x1=\"3\" x2=\"3\" y1=\"14\" y2=\"14\"></line>\n</svg>`;\n\nexport const orderedListIcon = `<svg viewBox=\"0 0 18 18\">\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" x1=\"7\" x2=\"15\" y1=\"4\" y2=\"4\"></line>\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" x1=\"7\" x2=\"15\" y1=\"9\" y2=\"9\"></line>\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" x1=\"7\" x2=\"15\" y1=\"14\" y2=\"14\"></line>\n  <line stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\" x1=\"2.5\" x2=\"4.5\" y1=\"5.5\" y2=\"5.5\"></line>\n  <path fill=\"currentColor\" d=\"M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z\"></path>\n  <path stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\" d=\"M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156\"></path>\n  <path stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\" d=\"M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109\"></path>\n</svg>`;", "/**\n * Toolbar component for OverType editor\n * Provides markdown formatting buttons with icons\n */\n\nimport * as icons from './icons.js';\n\nexport class Toolbar {\n  constructor(editor) {\n    this.editor = editor;\n    this.container = null;\n    this.buttons = {};\n  }\n\n  /**\n   * Create and attach toolbar to editor\n   */\n  create() {\n    // Create toolbar container\n    this.container = document.createElement('div');\n    this.container.className = 'overtype-toolbar';\n    this.container.setAttribute('role', 'toolbar');\n    this.container.setAttribute('aria-label', 'Text formatting');\n\n    // Define toolbar buttons\n    const buttonConfig = [\n      { name: 'bold', icon: icons.boldIcon, title: 'Bold (Ctrl+B)', action: 'toggleBold' },\n      { name: 'italic', icon: icons.italicIcon, title: 'Italic (Ctrl+I)', action: 'toggleItalic' },\n      { separator: true },\n      { name: 'h1', icon: icons.h1Icon, title: 'Heading 1', action: 'insertH1' },\n      { name: 'h2', icon: icons.h2Icon, title: 'Heading 2', action: 'insertH2' },\n      { name: 'h3', icon: icons.h3Icon, title: 'Heading 3', action: 'insertH3' },\n      { separator: true },\n      { name: 'link', icon: icons.linkIcon, title: 'Insert Link (Ctrl+K)', action: 'insertLink' },\n      { name: 'code', icon: icons.codeIcon, title: 'Inline Code', action: 'toggleCode' },\n      { name: 'codeBlock', icon: icons.codeBlockIcon, title: 'Code Block', action: 'insertCodeBlock' },\n      { separator: true },\n      { name: 'bulletList', icon: icons.bulletListIcon, title: 'Bullet List', action: 'toggleBulletList' },\n      { name: 'orderedList', icon: icons.orderedListIcon, title: 'Numbered List', action: 'toggleNumberedList' }\n    ];\n\n    // Create buttons\n    buttonConfig.forEach(config => {\n      if (config.separator) {\n        const separator = document.createElement('div');\n        separator.className = 'overtype-toolbar-separator';\n        separator.setAttribute('role', 'separator');\n        this.container.appendChild(separator);\n      } else {\n        const button = this.createButton(config);\n        this.buttons[config.name] = button;\n        this.container.appendChild(button);\n      }\n    });\n\n    // Insert toolbar before editor wrapper\n    const wrapper = this.editor.element.querySelector('.overtype-wrapper');\n    if (wrapper) {\n      this.editor.element.insertBefore(this.container, wrapper);\n    }\n\n    return this.container;\n  }\n\n  /**\n   * Create individual toolbar button\n   */\n  createButton(config) {\n    const button = document.createElement('button');\n    button.className = 'overtype-toolbar-button';\n    button.type = 'button';\n    button.title = config.title;\n    button.setAttribute('aria-label', config.title);\n    button.setAttribute('data-action', config.action);\n    button.innerHTML = config.icon;\n\n    // Add click handler\n    button.addEventListener('click', (e) => {\n      e.preventDefault();\n      this.handleAction(config.action);\n    });\n\n    return button;\n  }\n\n  /**\n   * Handle toolbar button actions\n   */\n  async handleAction(action) {\n    const textarea = this.editor.textarea;\n    if (!textarea) return;\n\n    // Focus textarea\n    textarea.focus();\n\n    // Get markdown-actions functions\n    try {\n      // Try dynamic import first, fall back to global\n      let markdownActions;\n      try {\n        markdownActions = await import('../../markdown-actions/dist/markdown-actions.esm.js');\n      } catch {\n        // Fallback to global if module import fails (e.g., in browser)\n        if (window.markdownActions) {\n          markdownActions = window.markdownActions;\n        } else {\n          throw new Error('markdown-actions not available');\n        }\n      }\n      \n      switch (action) {\n        case 'toggleBold':\n          markdownActions.toggleBold(textarea);\n          break;\n        case 'toggleItalic':\n          markdownActions.toggleItalic(textarea);\n          break;\n        case 'insertH1':\n          markdownActions.insertHeader(textarea, 1);\n          break;\n        case 'insertH2':\n          markdownActions.insertHeader(textarea, 2);\n          break;\n        case 'insertH3':\n          markdownActions.insertHeader(textarea, 3);\n          break;\n        case 'insertLink':\n          markdownActions.insertLink(textarea);\n          break;\n        case 'toggleCode':\n          markdownActions.toggleCode(textarea);\n          break;\n        case 'insertCodeBlock':\n          markdownActions.insertCodeBlock(textarea);\n          break;\n        case 'toggleBulletList':\n          markdownActions.toggleBulletList(textarea);\n          break;\n        case 'toggleNumberedList':\n          markdownActions.toggleNumberedList(textarea);\n          break;\n      }\n\n      // Trigger input event to update preview\n      textarea.dispatchEvent(new Event('input', { bubbles: true }));\n    } catch (error) {\n      console.error('Error loading markdown-actions:', error);\n    }\n  }\n\n  /**\n   * Update toolbar button states based on current selection\n   */\n  async updateButtonStates() {\n    const textarea = this.editor.textarea;\n    if (!textarea) return;\n\n    try {\n      // Try dynamic import first, fall back to global\n      let markdownActions;\n      try {\n        markdownActions = await import('../../markdown-actions/dist/markdown-actions.esm.js');\n      } catch {\n        // Fallback to global if module import fails (e.g., in browser)\n        if (window.markdownActions) {\n          markdownActions = window.markdownActions;\n        } else {\n          return; // Silently fail if markdown-actions not available\n        }\n      }\n      const activeFormats = markdownActions.getActiveFormats(textarea);\n\n      // Update button states\n      Object.entries(this.buttons).forEach(([name, button]) => {\n        let isActive = false;\n        \n        switch (name) {\n          case 'bold':\n            isActive = activeFormats.includes('bold');\n            break;\n          case 'italic':\n            isActive = activeFormats.includes('italic');\n            break;\n          case 'code':\n            isActive = activeFormats.includes('code');\n            break;\n          case 'bulletList':\n            isActive = activeFormats.includes('bulletList');\n            break;\n          case 'orderedList':\n            isActive = activeFormats.includes('orderedList');\n            break;\n          case 'h1':\n            isActive = activeFormats.includes('header1');\n            break;\n          case 'h2':\n            isActive = activeFormats.includes('header2');\n            break;\n          case 'h3':\n            isActive = activeFormats.includes('header3');\n            break;\n        }\n\n        button.classList.toggle('active', isActive);\n        button.setAttribute('aria-pressed', isActive.toString());\n      });\n    } catch (error) {\n      // Silently fail if markdown-actions not available\n    }\n  }\n\n  /**\n   * Destroy toolbar\n   */\n  destroy() {\n    if (this.container) {\n      this.container.remove();\n      this.container = null;\n      this.buttons = {};\n    }\n  }\n}", "/**\n * OverType - A lightweight markdown editor library with perfect WYSIWYG alignment\n * @version 1.0.0\n * @license MIT\n */\n\nimport { MarkdownParser } from './parser.js';\nimport { ShortcutsManager } from './shortcuts.js';\nimport { generateStyles } from './styles.js';\nimport { getTheme, mergeTheme, solar } from './themes.js';\nimport { Toolbar } from './toolbar.js';\n\n/**\n * OverType Editor Class\n */\nclass OverType {\n    // Static properties\n    static instances = new WeakMap();\n    static stylesInjected = false;\n    static globalListenersInitialized = false;\n    static instanceCount = 0;\n\n    /**\n     * Constructor - Always returns an array of instances\n     * @param {string|Element|NodeList|Array} target - Target element(s)\n     * @param {Object} options - Configuration options\n     * @returns {Array} Array of OverType instances\n     */\n    constructor(target, options = {}) {\n      // Convert target to array of elements\n      let elements;\n      \n      if (typeof target === 'string') {\n        elements = document.querySelectorAll(target);\n        if (elements.length === 0) {\n          throw new Error(`No elements found for selector: ${target}`);\n        }\n        elements = Array.from(elements);\n      } else if (target instanceof Element) {\n        elements = [target];\n      } else if (target instanceof NodeList) {\n        elements = Array.from(target);\n      } else if (Array.isArray(target)) {\n        elements = target;\n      } else {\n        throw new Error('Invalid target: must be selector string, Element, NodeList, or Array');\n      }\n\n      // Initialize all elements and return array\n      const instances = elements.map(element => {\n        // Check for existing instance\n        if (element.overTypeInstance) {\n          // Re-init existing instance\n          element.overTypeInstance.reinit(options);\n          return element.overTypeInstance;\n        }\n\n        // Create new instance\n        const instance = Object.create(OverType.prototype);\n        instance._init(element, options);\n        element.overTypeInstance = instance;\n        OverType.instances.set(element, instance);\n        return instance;\n      });\n\n      return instances;\n    }\n\n    /**\n     * Internal initialization\n     * @private\n     */\n    _init(element, options = {}) {\n      this.element = element;\n      this.options = this._mergeOptions(options);\n      this.instanceId = ++OverType.instanceCount;\n      this.initialized = false;\n\n      // Inject styles if needed\n      OverType.injectStyles();\n\n      // Initialize global listeners\n      OverType.initGlobalListeners();\n\n      // Check for existing OverType DOM structure\n      const wrapper = element.querySelector('.overtype-wrapper');\n      if (wrapper) {\n        this._recoverFromDOM(wrapper);\n      } else {\n        this._buildFromScratch();\n      }\n\n      // Setup shortcuts manager\n      this.shortcuts = new ShortcutsManager(this);\n\n      // Setup toolbar if enabled\n      if (this.options.toolbar) {\n        this.toolbar = new Toolbar(this);\n        this.toolbar.create();\n        \n        // Update toolbar states on selection change\n        this.textarea.addEventListener('selectionchange', () => {\n          this.toolbar.updateButtonStates();\n        });\n        this.textarea.addEventListener('input', () => {\n          this.toolbar.updateButtonStates();\n        });\n      }\n\n      // Mark as initialized\n      this.initialized = true;\n\n      // Call onChange if provided\n      if (this.options.onChange) {\n        this.options.onChange(this.getValue(), this);\n      }\n    }\n\n    /**\n     * Merge user options with defaults\n     * @private\n     */\n    _mergeOptions(options) {\n      const defaults = {\n        // Typography\n        fontSize: '14px',\n        lineHeight: 1.6,\n        fontFamily: \"'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace\",\n        padding: '16px',\n        \n        // Mobile styles\n        mobile: {\n          fontSize: '16px',  // Prevent zoom on iOS\n          padding: '12px',\n          lineHeight: 1.5\n        },\n        \n        // Behavior\n        autofocus: false,\n        placeholder: 'Start typing...',\n        value: '',\n        \n        // Callbacks\n        onChange: null,\n        onKeydown: null,\n        \n        // Features\n        showActiveLineRaw: false,\n        showStats: false,\n        toolbar: false,\n        statsFormatter: null\n      };\n      \n      // Remove theme and colors from options - these are now global\n      const { theme, colors, ...cleanOptions } = options;\n      \n      return {\n        ...defaults,\n        ...cleanOptions\n      };\n    }\n\n    /**\n     * Recover from existing DOM structure\n     * @private\n     */\n    _recoverFromDOM(wrapper) {\n      this.wrapper = wrapper;\n      this.textarea = wrapper.querySelector('.overtype-input');\n      this.preview = wrapper.querySelector('.overtype-preview');\n\n      if (!this.textarea || !this.preview) {\n        // Partial DOM - clear and rebuild\n        wrapper.remove();\n        this._buildFromScratch();\n        return;\n      }\n\n      // Store reference on wrapper\n      this.wrapper._instance = this;\n      \n      // Apply instance-specific styles via CSS custom properties\n      if (this.options.fontSize) {\n        this.wrapper.style.setProperty('--instance-font-size', this.options.fontSize);\n      }\n      if (this.options.lineHeight) {\n        this.wrapper.style.setProperty('--instance-line-height', String(this.options.lineHeight));\n      }\n      if (this.options.padding) {\n        this.wrapper.style.setProperty('--instance-padding', this.options.padding);\n      }\n\n      // Disable autofill, spellcheck, and extensions\n      this._configureTextarea();\n\n      // Apply any new options\n      this._applyOptions();\n    }\n\n    /**\n     * Build editor from scratch\n     * @private\n     */\n    _buildFromScratch() {\n      // Extract any existing content\n      const content = this._extractContent();\n\n      // Clear element\n      this.element.innerHTML = '';\n\n      // Create DOM structure\n      this._createDOM();\n\n      // Set initial content\n      if (content || this.options.value) {\n        this.setValue(content || this.options.value);\n      }\n\n      // Apply options\n      this._applyOptions();\n    }\n\n    /**\n     * Extract content from element\n     * @private\n     */\n    _extractContent() {\n      // Look for existing OverType textarea\n      const textarea = this.element.querySelector('.overtype-input');\n      if (textarea) return textarea.value;\n\n      // Use element's text content as fallback\n      return this.element.textContent || '';\n    }\n\n    /**\n     * Create DOM structure\n     * @private\n     */\n    _createDOM() {\n      // Create wrapper\n      this.wrapper = document.createElement('div');\n      this.wrapper.className = 'overtype-wrapper';\n      \n      // Set current global theme\n      const currentTheme = OverType.currentTheme || solar;\n      const themeName = typeof currentTheme === 'string' ? currentTheme : currentTheme.name;\n      if (themeName) {\n        this.wrapper.setAttribute('data-theme', themeName);\n      }\n      \n      // Add stats wrapper class if stats are enabled\n      if (this.options.showStats) {\n        this.wrapper.classList.add('with-stats');\n      }\n      \n      // Apply instance-specific styles via CSS custom properties\n      if (this.options.fontSize) {\n        this.wrapper.style.setProperty('--instance-font-size', this.options.fontSize);\n      }\n      if (this.options.lineHeight) {\n        this.wrapper.style.setProperty('--instance-line-height', String(this.options.lineHeight));\n      }\n      if (this.options.padding) {\n        this.wrapper.style.setProperty('--instance-padding', this.options.padding);\n      }\n      \n      this.wrapper._instance = this;\n\n      // Create textarea\n      this.textarea = document.createElement('textarea');\n      this.textarea.className = 'overtype-input';\n      this.textarea.placeholder = this.options.placeholder;\n      this._configureTextarea();\n\n      // Create preview div\n      this.preview = document.createElement('div');\n      this.preview.className = 'overtype-preview';\n      this.preview.setAttribute('aria-hidden', 'true');\n\n      // Assemble DOM\n      this.wrapper.appendChild(this.textarea);\n      this.wrapper.appendChild(this.preview);\n      \n      // Add stats bar if enabled\n      if (this.options.showStats) {\n        this.statsBar = document.createElement('div');\n        this.statsBar.className = 'overtype-stats';\n        this.wrapper.appendChild(this.statsBar);\n        this._updateStats();\n      }\n      \n      this.element.appendChild(this.wrapper);\n    }\n\n    /**\n     * Configure textarea attributes\n     * @private\n     */\n    _configureTextarea() {\n      this.textarea.setAttribute('autocomplete', 'off');\n      this.textarea.setAttribute('autocorrect', 'off');\n      this.textarea.setAttribute('autocapitalize', 'off');\n      this.textarea.setAttribute('spellcheck', 'false');\n      this.textarea.setAttribute('data-gramm', 'false');\n      this.textarea.setAttribute('data-gramm_editor', 'false');\n      this.textarea.setAttribute('data-enable-grammarly', 'false');\n    }\n\n    /**\n     * Apply options to the editor\n     * @private\n     */\n    _applyOptions() {\n      // Apply autofocus\n      if (this.options.autofocus) {\n        this.textarea.focus();\n      }\n\n      // Update preview with initial content\n      this.updatePreview();\n    }\n\n    /**\n     * Update preview with parsed markdown\n     */\n    updatePreview() {\n      const text = this.textarea.value;\n      const cursorPos = this.textarea.selectionStart;\n      const activeLine = this._getCurrentLine(text, cursorPos);\n      \n      // Parse markdown\n      const html = MarkdownParser.parse(text, activeLine, this.options.showActiveLineRaw);\n      this.preview.innerHTML = html || '<span style=\"color: #808080;\">Start typing...</span>';\n      \n      // Apply code block backgrounds\n      this._applyCodeBlockBackgrounds();\n      \n      // Update stats if enabled\n      if (this.options.showStats && this.statsBar) {\n        this._updateStats();\n      }\n      \n      // Trigger onChange callback\n      if (this.options.onChange && this.initialized) {\n        this.options.onChange(text, this);\n      }\n    }\n\n    /**\n     * Apply background styling to code blocks\n     * @private\n     */\n    _applyCodeBlockBackgrounds() {\n      // Find all code fence elements\n      const codeFences = this.preview.querySelectorAll('.code-fence');\n      \n      // Process pairs of code fences\n      for (let i = 0; i < codeFences.length - 1; i += 2) {\n        const openFence = codeFences[i];\n        const closeFence = codeFences[i + 1];\n        \n        // Get parent divs\n        const openParent = openFence.parentElement;\n        const closeParent = closeFence.parentElement;\n        \n        if (!openParent || !closeParent) continue;\n        \n        // Make fences display: block\n        openFence.style.display = 'block';\n        closeFence.style.display = 'block';\n        \n        // Apply class to parent divs\n        openParent.classList.add('code-block-line');\n        closeParent.classList.add('code-block-line');\n        \n        // Apply class to all divs between the parent divs\n        let currentDiv = openParent.nextElementSibling;\n        while (currentDiv && currentDiv !== closeParent) {\n          // Apply class to divs between the fences\n          if (currentDiv.tagName === 'DIV') {\n            currentDiv.classList.add('code-block-line');\n          }\n          \n          // Move to next sibling\n          currentDiv = currentDiv.nextElementSibling;\n          \n          // Safety check to prevent infinite loop\n          if (!currentDiv) break;\n        }\n      }\n    }\n\n    /**\n     * Get current line number from cursor position\n     * @private\n     */\n    _getCurrentLine(text, cursorPos) {\n      const lines = text.substring(0, cursorPos).split('\\n');\n      return lines.length - 1;\n    }\n\n    /**\n     * Handle input events\n     * @private\n     */\n    handleInput(event) {\n      this.updatePreview();\n    }\n\n    /**\n     * Handle keydown events\n     * @private\n     */\n    handleKeydown(event) {\n      // Let shortcuts manager handle it first\n      const handled = this.shortcuts.handleKeydown(event);\n      \n      // Call user callback if provided\n      if (!handled && this.options.onKeydown) {\n        this.options.onKeydown(event, this);\n      }\n    }\n\n    /**\n     * Handle scroll events\n     * @private\n     */\n    handleScroll(event) {\n      // Sync preview scroll with textarea\n      this.preview.scrollTop = this.textarea.scrollTop;\n      this.preview.scrollLeft = this.textarea.scrollLeft;\n    }\n\n    /**\n     * Get editor content\n     * @returns {string} Current markdown content\n     */\n    getValue() {\n      return this.textarea.value;\n    }\n\n    /**\n     * Set editor content\n     * @param {string} value - Markdown content to set\n     */\n    setValue(value) {\n      this.textarea.value = value;\n      this.updatePreview();\n    }\n\n\n    /**\n     * Focus the editor\n     */\n    focus() {\n      this.textarea.focus();\n    }\n\n    /**\n     * Blur the editor\n     */\n    blur() {\n      this.textarea.blur();\n    }\n\n    /**\n     * Check if editor is initialized\n     * @returns {boolean}\n     */\n    isInitialized() {\n      return this.initialized;\n    }\n\n    /**\n     * Re-initialize with new options\n     * @param {Object} options - New options to apply\n     */\n    reinit(options = {}) {\n      this.options = this._mergeOptions({ ...this.options, ...options });\n      this._applyOptions();\n      this.updatePreview();\n    }\n\n    /**\n     * Update stats bar\n     * @private\n     */\n    _updateStats() {\n      if (!this.statsBar) return;\n      \n      const value = this.textarea.value;\n      const lines = value.split('\\n');\n      const chars = value.length;\n      const words = value.split(/\\s+/).filter(w => w.length > 0).length;\n      \n      // Calculate line and column\n      const selectionStart = this.textarea.selectionStart;\n      const beforeCursor = value.substring(0, selectionStart);\n      const linesBeforeCursor = beforeCursor.split('\\n');\n      const currentLine = linesBeforeCursor.length;\n      const currentColumn = linesBeforeCursor[linesBeforeCursor.length - 1].length + 1;\n      \n      // Use custom formatter if provided\n      if (this.options.statsFormatter) {\n        this.statsBar.innerHTML = this.options.statsFormatter({\n          chars,\n          words,\n          lines: lines.length,\n          line: currentLine,\n          column: currentColumn\n        });\n      } else {\n        // Default format with live dot\n        this.statsBar.innerHTML = `\n          <div class=\"overtype-stat\">\n            <span class=\"live-dot\"></span>\n            <span>${chars} chars, ${words} words, ${lines.length} lines</span>\n          </div>\n          <div class=\"overtype-stat\">Line ${currentLine}, Col ${currentColumn}</div>\n        `;\n      }\n    }\n    \n    /**\n     * Show or hide stats bar\n     * @param {boolean} show - Whether to show stats\n     */\n    showStats(show) {\n      this.options.showStats = show;\n      \n      if (show && !this.statsBar) {\n        // Create stats bar\n        this.statsBar = document.createElement('div');\n        this.statsBar.className = 'overtype-stats';\n        this.wrapper.appendChild(this.statsBar);\n        this.wrapper.classList.add('with-stats');\n        this._updateStats();\n      } else if (!show && this.statsBar) {\n        // Remove stats bar\n        this.statsBar.remove();\n        this.statsBar = null;\n        this.wrapper.classList.remove('with-stats');\n      }\n    }\n\n    /**\n     * Destroy the editor instance\n     */\n    destroy() {\n      // Remove instance reference\n      this.element.overTypeInstance = null;\n      OverType.instances.delete(this.element);\n\n      // Cleanup shortcuts\n      if (this.shortcuts) {\n        this.shortcuts.destroy();\n      }\n\n      // Remove DOM if created by us\n      if (this.wrapper) {\n        const content = this.getValue();\n        this.wrapper.remove();\n        \n        // Restore original content\n        this.element.textContent = content;\n      }\n\n      this.initialized = false;\n    }\n\n    // ===== Static Methods =====\n\n    /**\n     * Initialize multiple editors (static convenience method)\n     * @param {string|Element|NodeList|Array} target - Target element(s)\n     * @param {Object} options - Configuration options\n     * @returns {Array} Array of OverType instances\n     */\n    static init(target, options = {}) {\n      return new OverType(target, options);\n    }\n\n    /**\n     * Get instance from element\n     * @param {Element} element - DOM element\n     * @returns {OverType|null} OverType instance or null\n     */\n    static getInstance(element) {\n      return element.overTypeInstance || OverType.instances.get(element) || null;\n    }\n\n    /**\n     * Destroy all instances\n     */\n    static destroyAll() {\n      const elements = document.querySelectorAll('[data-overtype-instance]');\n      elements.forEach(element => {\n        const instance = OverType.getInstance(element);\n        if (instance) {\n          instance.destroy();\n        }\n      });\n    }\n\n    /**\n     * Inject styles into the document\n     * @param {boolean} force - Force re-injection\n     */\n    static injectStyles(force = false) {\n      if (OverType.stylesInjected && !force) return;\n\n      // Remove any existing OverType styles\n      const existing = document.querySelector('style.overtype-styles');\n      if (existing) {\n        existing.remove();\n      }\n\n      // Generate and inject new styles with current theme\n      const theme = OverType.currentTheme || solar;\n      const styles = generateStyles({ theme });\n      const styleEl = document.createElement('style');\n      styleEl.className = 'overtype-styles';\n      styleEl.textContent = styles;\n      document.head.appendChild(styleEl);\n\n      OverType.stylesInjected = true;\n    }\n    \n    /**\n     * Set global theme for all OverType instances\n     * @param {string|Object} theme - Theme name or custom theme object\n     * @param {Object} customColors - Optional color overrides\n     */\n    static setTheme(theme, customColors = null) {\n      // Process theme\n      let themeObj = typeof theme === 'string' ? getTheme(theme) : theme;\n      \n      // Apply custom colors if provided\n      if (customColors) {\n        themeObj = mergeTheme(themeObj, customColors);\n      }\n      \n      // Store as current theme\n      OverType.currentTheme = themeObj;\n      \n      // Re-inject styles with new theme\n      OverType.injectStyles(true);\n      \n      // Update all existing instances\n      document.querySelectorAll('.overtype-wrapper').forEach(wrapper => {\n        const themeName = typeof themeObj === 'string' ? themeObj : themeObj.name;\n        if (themeName) {\n          wrapper.setAttribute('data-theme', themeName);\n        }\n        \n        // Trigger preview update for the instance\n        const instance = wrapper._instance;\n        if (instance) {\n          instance.updatePreview();\n        }\n      });\n    }\n\n    /**\n     * Initialize global event listeners\n     */\n    static initGlobalListeners() {\n      if (OverType.globalListenersInitialized) return;\n\n      // Input event\n      document.addEventListener('input', (e) => {\n        if (e.target && e.target.classList && e.target.classList.contains('overtype-input')) {\n          const wrapper = e.target.closest('.overtype-wrapper');\n          const instance = wrapper?._instance;\n          if (instance) instance.handleInput(e);\n        }\n      });\n\n      // Keydown event\n      document.addEventListener('keydown', (e) => {\n        if (e.target && e.target.classList && e.target.classList.contains('overtype-input')) {\n          const wrapper = e.target.closest('.overtype-wrapper');\n          const instance = wrapper?._instance;\n          if (instance) instance.handleKeydown(e);\n        }\n      });\n\n      // Scroll event\n      document.addEventListener('scroll', (e) => {\n        if (e.target && e.target.classList && e.target.classList.contains('overtype-input')) {\n          const wrapper = e.target.closest('.overtype-wrapper');\n          const instance = wrapper?._instance;\n          if (instance) instance.handleScroll(e);\n        }\n      }, true);\n\n      // Selection change event\n      document.addEventListener('selectionchange', (e) => {\n        const activeElement = document.activeElement;\n        if (activeElement && activeElement.classList.contains('overtype-input')) {\n          const wrapper = activeElement.closest('.overtype-wrapper');\n          const instance = wrapper?._instance;\n          if (instance) {\n            // Update stats bar for cursor position\n            if (instance.options.showStats && instance.statsBar) {\n              instance._updateStats();\n            }\n            // Debounce updates\n            clearTimeout(instance._selectionTimeout);\n            instance._selectionTimeout = setTimeout(() => {\n              instance.updatePreview();\n            }, 50);\n          }\n        }\n      });\n\n      OverType.globalListenersInitialized = true;\n    }\n}\n\n// Export classes for advanced usage\nOverType.MarkdownParser = MarkdownParser;\nOverType.ShortcutsManager = ShortcutsManager;\n\n// Export theme utilities\nOverType.themes = { solar, cave: getTheme('cave') };\nOverType.getTheme = getTheme;\n\n// Set default theme\nOverType.currentTheme = solar;\n\n// For IIFE builds, esbuild needs the class as the default export\nexport default OverType;\n// Also export as named for ESM compatibility\nexport { OverType };"],
  "mappings": "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",
  "names": ["FORMATS", "getActiveFormats", "hasFormat"]
}
