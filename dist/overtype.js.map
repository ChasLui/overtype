{
  "version": 3,
  "sources": ["../src/overtype.js", "../src/parser.js", "../src/shortcuts.js", "../src/themes.js", "../src/styles.js"],
  "sourcesContent": ["/**\n * OverType - A lightweight markdown editor library with perfect WYSIWYG alignment\n * @version 1.0.0\n * @license MIT\n */\n\nimport { MarkdownParser } from './parser.js';\nimport { ShortcutsManager } from './shortcuts.js';\nimport { generateStyles } from './styles.js';\nimport { getTheme, mergeTheme, solar } from './themes.js';\n\n/**\n * OverType Editor Class\n */\nclass OverType {\n    // Static properties\n    static instances = new WeakMap();\n    static stylesInjected = false;\n    static globalListenersInitialized = false;\n    static instanceCount = 0;\n\n    /**\n     * Constructor - Always returns an array of instances\n     * @param {string|Element|NodeList|Array} target - Target element(s)\n     * @param {Object} options - Configuration options\n     * @returns {Array} Array of OverType instances\n     */\n    constructor(target, options = {}) {\n      // Convert target to array of elements\n      let elements;\n      \n      if (typeof target === 'string') {\n        elements = document.querySelectorAll(target);\n        if (elements.length === 0) {\n          throw new Error(`No elements found for selector: ${target}`);\n        }\n        elements = Array.from(elements);\n      } else if (target instanceof Element) {\n        elements = [target];\n      } else if (target instanceof NodeList) {\n        elements = Array.from(target);\n      } else if (Array.isArray(target)) {\n        elements = target;\n      } else {\n        throw new Error('Invalid target: must be selector string, Element, NodeList, or Array');\n      }\n\n      // Initialize all elements and return array\n      const instances = elements.map(element => {\n        // Check for existing instance\n        if (element.overTypeInstance) {\n          // Re-init existing instance\n          element.overTypeInstance.reinit(options);\n          return element.overTypeInstance;\n        }\n\n        // Create new instance\n        const instance = Object.create(OverType.prototype);\n        instance._init(element, options);\n        element.overTypeInstance = instance;\n        OverType.instances.set(element, instance);\n        return instance;\n      });\n\n      return instances;\n    }\n\n    /**\n     * Internal initialization\n     * @private\n     */\n    _init(element, options = {}) {\n      this.element = element;\n      this.options = this._mergeOptions(options);\n      this.instanceId = ++OverType.instanceCount;\n      this.initialized = false;\n\n      // Inject styles if needed\n      OverType.injectStyles();\n\n      // Initialize global listeners\n      OverType.initGlobalListeners();\n\n      // Check for existing OverType DOM structure\n      const wrapper = element.querySelector('.overtype-wrapper');\n      if (wrapper) {\n        this._recoverFromDOM(wrapper);\n      } else {\n        this._buildFromScratch();\n      }\n\n      // Setup shortcuts manager\n      this.shortcuts = new ShortcutsManager(this);\n\n      // Mark as initialized\n      this.initialized = true;\n\n      // Call onChange if provided\n      if (this.options.onChange) {\n        this.options.onChange(this.getValue(), this);\n      }\n    }\n\n    /**\n     * Merge user options with defaults\n     * @private\n     */\n    _mergeOptions(options) {\n      const defaults = {\n        // Typography\n        fontSize: '14px',\n        lineHeight: 1.6,\n        fontFamily: \"'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace\",\n        padding: '16px',\n        \n        // Mobile styles\n        mobile: {\n          fontSize: '16px',  // Prevent zoom on iOS\n          padding: '12px',\n          lineHeight: 1.5\n        },\n        \n        // Behavior\n        autofocus: false,\n        placeholder: 'Start typing...',\n        value: '',\n        \n        // Callbacks\n        onChange: null,\n        onKeydown: null,\n        \n        // Features\n        showActiveLineRaw: false,\n        showStats: false,\n        statsFormatter: null\n      };\n      \n      // Remove theme and colors from options - these are now global\n      const { theme, colors, ...cleanOptions } = options;\n      \n      return {\n        ...defaults,\n        ...cleanOptions\n      };\n    }\n\n    /**\n     * Recover from existing DOM structure\n     * @private\n     */\n    _recoverFromDOM(wrapper) {\n      this.wrapper = wrapper;\n      this.textarea = wrapper.querySelector('.overtype-input');\n      this.preview = wrapper.querySelector('.overtype-preview');\n\n      if (!this.textarea || !this.preview) {\n        // Partial DOM - clear and rebuild\n        wrapper.remove();\n        this._buildFromScratch();\n        return;\n      }\n\n      // Store reference on wrapper\n      this.wrapper._instance = this;\n\n      // Disable autofill, spellcheck, and extensions\n      this._configureTextarea();\n\n      // Apply any new options\n      this._applyOptions();\n    }\n\n    /**\n     * Build editor from scratch\n     * @private\n     */\n    _buildFromScratch() {\n      // Extract any existing content\n      const content = this._extractContent();\n\n      // Clear element\n      this.element.innerHTML = '';\n\n      // Create DOM structure\n      this._createDOM();\n\n      // Set initial content\n      if (content || this.options.value) {\n        this.setValue(content || this.options.value);\n      }\n\n      // Apply options\n      this._applyOptions();\n    }\n\n    /**\n     * Extract content from element\n     * @private\n     */\n    _extractContent() {\n      // Look for existing OverType textarea\n      const textarea = this.element.querySelector('.overtype-input');\n      if (textarea) return textarea.value;\n\n      // Use element's text content as fallback\n      return this.element.textContent || '';\n    }\n\n    /**\n     * Create DOM structure\n     * @private\n     */\n    _createDOM() {\n      // Create wrapper\n      this.wrapper = document.createElement('div');\n      this.wrapper.className = 'overtype-wrapper';\n      \n      // Set current global theme\n      const currentTheme = OverType.currentTheme || solar;\n      const themeName = typeof currentTheme === 'string' ? currentTheme : currentTheme.name;\n      if (themeName) {\n        this.wrapper.setAttribute('data-theme', themeName);\n      }\n      \n      // Add stats wrapper class if stats are enabled\n      if (this.options.showStats) {\n        this.wrapper.classList.add('with-stats');\n      }\n      this.wrapper._instance = this;\n\n      // Create textarea\n      this.textarea = document.createElement('textarea');\n      this.textarea.className = 'overtype-input';\n      this.textarea.placeholder = this.options.placeholder;\n      this._configureTextarea();\n\n      // Create preview div\n      this.preview = document.createElement('div');\n      this.preview.className = 'overtype-preview';\n      this.preview.setAttribute('aria-hidden', 'true');\n\n      // Assemble DOM\n      this.wrapper.appendChild(this.textarea);\n      this.wrapper.appendChild(this.preview);\n      \n      // Add stats bar if enabled\n      if (this.options.showStats) {\n        this.statsBar = document.createElement('div');\n        this.statsBar.className = 'overtype-stats';\n        this.wrapper.appendChild(this.statsBar);\n        this._updateStats();\n      }\n      \n      this.element.appendChild(this.wrapper);\n    }\n\n    /**\n     * Configure textarea attributes\n     * @private\n     */\n    _configureTextarea() {\n      this.textarea.setAttribute('autocomplete', 'off');\n      this.textarea.setAttribute('autocorrect', 'off');\n      this.textarea.setAttribute('autocapitalize', 'off');\n      this.textarea.setAttribute('spellcheck', 'false');\n      this.textarea.setAttribute('data-gramm', 'false');\n      this.textarea.setAttribute('data-gramm_editor', 'false');\n      this.textarea.setAttribute('data-enable-grammarly', 'false');\n    }\n\n    /**\n     * Apply options to the editor\n     * @private\n     */\n    _applyOptions() {\n      // Apply autofocus\n      if (this.options.autofocus) {\n        this.textarea.focus();\n      }\n\n      // Update preview with initial content\n      this.updatePreview();\n    }\n\n    /**\n     * Update preview with parsed markdown\n     */\n    updatePreview() {\n      const text = this.textarea.value;\n      const cursorPos = this.textarea.selectionStart;\n      const activeLine = this._getCurrentLine(text, cursorPos);\n      \n      // Parse markdown\n      const html = MarkdownParser.parse(text, activeLine, this.options.showActiveLineRaw);\n      this.preview.innerHTML = html || '<span style=\"color: #808080;\">Start typing...</span>';\n      \n      // Apply code block backgrounds\n      this._applyCodeBlockBackgrounds();\n      \n      // Update stats if enabled\n      if (this.options.showStats && this.statsBar) {\n        this._updateStats();\n      }\n      \n      // Trigger onChange callback\n      if (this.options.onChange && this.initialized) {\n        this.options.onChange(text, this);\n      }\n    }\n\n    /**\n     * Apply background styling to code blocks\n     * @private\n     */\n    _applyCodeBlockBackgrounds() {\n      // Find all code fence elements\n      const codeFences = this.preview.querySelectorAll('.code-fence');\n      \n      // Process pairs of code fences\n      for (let i = 0; i < codeFences.length - 1; i += 2) {\n        const openFence = codeFences[i];\n        const closeFence = codeFences[i + 1];\n        \n        // Get parent divs\n        const openParent = openFence.parentElement;\n        const closeParent = closeFence.parentElement;\n        \n        if (!openParent || !closeParent) continue;\n        \n        // Make fences display: block\n        openFence.style.display = 'block';\n        closeFence.style.display = 'block';\n        \n        // Apply class to parent divs\n        openParent.classList.add('code-block-line');\n        closeParent.classList.add('code-block-line');\n        \n        // Apply class to all divs between the parent divs\n        let currentDiv = openParent.nextElementSibling;\n        while (currentDiv && currentDiv !== closeParent) {\n          // Apply class to divs between the fences\n          if (currentDiv.tagName === 'DIV') {\n            currentDiv.classList.add('code-block-line');\n          }\n          \n          // Move to next sibling\n          currentDiv = currentDiv.nextElementSibling;\n          \n          // Safety check to prevent infinite loop\n          if (!currentDiv) break;\n        }\n      }\n    }\n\n    /**\n     * Get current line number from cursor position\n     * @private\n     */\n    _getCurrentLine(text, cursorPos) {\n      const lines = text.substring(0, cursorPos).split('\\n');\n      return lines.length - 1;\n    }\n\n    /**\n     * Handle input events\n     * @private\n     */\n    handleInput(event) {\n      this.updatePreview();\n    }\n\n    /**\n     * Handle keydown events\n     * @private\n     */\n    handleKeydown(event) {\n      // Let shortcuts manager handle it first\n      const handled = this.shortcuts.handleKeydown(event);\n      \n      // Call user callback if provided\n      if (!handled && this.options.onKeydown) {\n        this.options.onKeydown(event, this);\n      }\n    }\n\n    /**\n     * Handle scroll events\n     * @private\n     */\n    handleScroll(event) {\n      // Sync preview scroll with textarea\n      this.preview.scrollTop = this.textarea.scrollTop;\n      this.preview.scrollLeft = this.textarea.scrollLeft;\n    }\n\n    /**\n     * Get editor content\n     * @returns {string} Current markdown content\n     */\n    getValue() {\n      return this.textarea.value;\n    }\n\n    /**\n     * Set editor content\n     * @param {string} value - Markdown content to set\n     */\n    setValue(value) {\n      this.textarea.value = value;\n      this.updatePreview();\n    }\n\n\n    /**\n     * Focus the editor\n     */\n    focus() {\n      this.textarea.focus();\n    }\n\n    /**\n     * Blur the editor\n     */\n    blur() {\n      this.textarea.blur();\n    }\n\n    /**\n     * Check if editor is initialized\n     * @returns {boolean}\n     */\n    isInitialized() {\n      return this.initialized;\n    }\n\n    /**\n     * Re-initialize with new options\n     * @param {Object} options - New options to apply\n     */\n    reinit(options = {}) {\n      this.options = this._mergeOptions({ ...this.options, ...options });\n      this._applyOptions();\n      this.updatePreview();\n    }\n\n    /**\n     * Update stats bar\n     * @private\n     */\n    _updateStats() {\n      if (!this.statsBar) return;\n      \n      const value = this.textarea.value;\n      const lines = value.split('\\n');\n      const chars = value.length;\n      const words = value.split(/\\s+/).filter(w => w.length > 0).length;\n      \n      // Calculate line and column\n      const selectionStart = this.textarea.selectionStart;\n      const beforeCursor = value.substring(0, selectionStart);\n      const linesBeforeCursor = beforeCursor.split('\\n');\n      const currentLine = linesBeforeCursor.length;\n      const currentColumn = linesBeforeCursor[linesBeforeCursor.length - 1].length + 1;\n      \n      // Use custom formatter if provided\n      if (this.options.statsFormatter) {\n        this.statsBar.innerHTML = this.options.statsFormatter({\n          chars,\n          words,\n          lines: lines.length,\n          line: currentLine,\n          column: currentColumn\n        });\n      } else {\n        // Default format with live dot\n        this.statsBar.innerHTML = `\n          <div class=\"overtype-stat\">\n            <span class=\"live-dot\"></span>\n            <span>${chars} chars, ${words} words, ${lines.length} lines</span>\n          </div>\n          <div class=\"overtype-stat\">Line ${currentLine}, Col ${currentColumn}</div>\n        `;\n      }\n    }\n    \n    /**\n     * Show or hide stats bar\n     * @param {boolean} show - Whether to show stats\n     */\n    showStats(show) {\n      this.options.showStats = show;\n      \n      if (show && !this.statsBar) {\n        // Create stats bar\n        this.statsBar = document.createElement('div');\n        this.statsBar.className = 'overtype-stats';\n        this.wrapper.appendChild(this.statsBar);\n        this.wrapper.classList.add('with-stats');\n        this._updateStats();\n      } else if (!show && this.statsBar) {\n        // Remove stats bar\n        this.statsBar.remove();\n        this.statsBar = null;\n        this.wrapper.classList.remove('with-stats');\n      }\n    }\n\n    /**\n     * Destroy the editor instance\n     */\n    destroy() {\n      // Remove instance reference\n      this.element.overTypeInstance = null;\n      OverType.instances.delete(this.element);\n\n      // Cleanup shortcuts\n      if (this.shortcuts) {\n        this.shortcuts.destroy();\n      }\n\n      // Remove DOM if created by us\n      if (this.wrapper) {\n        const content = this.getValue();\n        this.wrapper.remove();\n        \n        // Restore original content\n        this.element.textContent = content;\n      }\n\n      this.initialized = false;\n    }\n\n    // ===== Static Methods =====\n\n    /**\n     * Initialize multiple editors (static convenience method)\n     * @param {string|Element|NodeList|Array} target - Target element(s)\n     * @param {Object} options - Configuration options\n     * @returns {Array} Array of OverType instances\n     */\n    static init(target, options = {}) {\n      return new OverType(target, options);\n    }\n\n    /**\n     * Get instance from element\n     * @param {Element} element - DOM element\n     * @returns {OverType|null} OverType instance or null\n     */\n    static getInstance(element) {\n      return element.overTypeInstance || OverType.instances.get(element) || null;\n    }\n\n    /**\n     * Destroy all instances\n     */\n    static destroyAll() {\n      const elements = document.querySelectorAll('[data-overtype-instance]');\n      elements.forEach(element => {\n        const instance = OverType.getInstance(element);\n        if (instance) {\n          instance.destroy();\n        }\n      });\n    }\n\n    /**\n     * Inject styles into the document\n     * @param {boolean} force - Force re-injection\n     */\n    static injectStyles(force = false) {\n      if (OverType.stylesInjected && !force) return;\n\n      // Remove any existing OverType styles\n      const existing = document.querySelector('style.overtype-styles');\n      if (existing) {\n        existing.remove();\n      }\n\n      // Generate and inject new styles with current theme\n      const theme = OverType.currentTheme || solar;\n      const styles = generateStyles({ theme });\n      const styleEl = document.createElement('style');\n      styleEl.className = 'overtype-styles';\n      styleEl.textContent = styles;\n      document.head.appendChild(styleEl);\n\n      OverType.stylesInjected = true;\n    }\n    \n    /**\n     * Set global theme for all OverType instances\n     * @param {string|Object} theme - Theme name or custom theme object\n     * @param {Object} customColors - Optional color overrides\n     */\n    static setTheme(theme, customColors = null) {\n      // Process theme\n      let themeObj = typeof theme === 'string' ? getTheme(theme) : theme;\n      \n      // Apply custom colors if provided\n      if (customColors) {\n        themeObj = mergeTheme(themeObj, customColors);\n      }\n      \n      // Store as current theme\n      OverType.currentTheme = themeObj;\n      \n      // Re-inject styles with new theme\n      OverType.injectStyles(true);\n      \n      // Update all existing instances\n      document.querySelectorAll('.overtype-wrapper').forEach(wrapper => {\n        const themeName = typeof themeObj === 'string' ? themeObj : themeObj.name;\n        if (themeName) {\n          wrapper.setAttribute('data-theme', themeName);\n        }\n        \n        // Trigger preview update for the instance\n        const instance = wrapper._instance;\n        if (instance) {\n          instance.updatePreview();\n        }\n      });\n    }\n\n    /**\n     * Initialize global event listeners\n     */\n    static initGlobalListeners() {\n      if (OverType.globalListenersInitialized) return;\n\n      // Input event\n      document.addEventListener('input', (e) => {\n        if (e.target.classList.contains('overtype-input')) {\n          const wrapper = e.target.closest('.overtype-wrapper');\n          const instance = wrapper?._instance;\n          if (instance) instance.handleInput(e);\n        }\n      });\n\n      // Keydown event\n      document.addEventListener('keydown', (e) => {\n        if (e.target.classList.contains('overtype-input')) {\n          const wrapper = e.target.closest('.overtype-wrapper');\n          const instance = wrapper?._instance;\n          if (instance) instance.handleKeydown(e);\n        }\n      });\n\n      // Scroll event\n      document.addEventListener('scroll', (e) => {\n        if (e.target.classList.contains('overtype-input')) {\n          const wrapper = e.target.closest('.overtype-wrapper');\n          const instance = wrapper?._instance;\n          if (instance) instance.handleScroll(e);\n        }\n      }, true);\n\n      // Selection change event\n      document.addEventListener('selectionchange', (e) => {\n        const activeElement = document.activeElement;\n        if (activeElement && activeElement.classList.contains('overtype-input')) {\n          const wrapper = activeElement.closest('.overtype-wrapper');\n          const instance = wrapper?._instance;\n          if (instance) {\n            // Update stats bar for cursor position\n            if (instance.options.showStats && instance.statsBar) {\n              instance._updateStats();\n            }\n            // Debounce updates\n            clearTimeout(instance._selectionTimeout);\n            instance._selectionTimeout = setTimeout(() => {\n              instance.updatePreview();\n            }, 50);\n          }\n        }\n      });\n\n      OverType.globalListenersInitialized = true;\n    }\n}\n\n// Export classes for advanced usage\nOverType.MarkdownParser = MarkdownParser;\nOverType.ShortcutsManager = ShortcutsManager;\n\n// Export theme utilities\nOverType.themes = { solar, cave: getTheme('cave') };\nOverType.getTheme = getTheme;\n\n// Set default theme\nOverType.currentTheme = solar;\n\n// For IIFE builds, esbuild needs the class as the default export\nexport default OverType;\n// Also export as named for ESM compatibility\nexport { OverType };", "/**\n * MarkdownParser - Parses markdown into HTML while preserving character alignment\n * \n * Key principles:\n * - Every character must occupy the exact same position as in the textarea\n * - No font-size changes, no padding/margin on inline elements\n * - Markdown tokens remain visible but styled\n */\nexport class MarkdownParser {\n  /**\n   * Escape HTML special characters\n   * @param {string} text - Raw text to escape\n   * @returns {string} Escaped HTML-safe text\n   */\n  static escapeHtml(text) {\n    const map = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;'\n    };\n    return text.replace(/[&<>\"']/g, m => map[m]);\n  }\n\n  /**\n   * Preserve leading spaces as non-breaking spaces\n   * @param {string} html - HTML string\n   * @param {string} originalLine - Original line with spaces\n   * @returns {string} HTML with preserved indentation\n   */\n  static preserveIndentation(html, originalLine) {\n    const leadingSpaces = originalLine.match(/^(\\s*)/)[1];\n    const indentation = leadingSpaces.replace(/ /g, '&nbsp;');\n    return html.replace(/^\\s*/, indentation);\n  }\n\n  /**\n   * Parse headers (h1-h3 only)\n   * @param {string} html - HTML line to parse\n   * @returns {string} Parsed HTML with header styling\n   */\n  static parseHeader(html) {\n    return html.replace(/^(#{1,3})\\s(.+)$/, (match, hashes, content) => {\n      const level = hashes.length;\n      const levelClasses = ['h1', 'h2', 'h3'];\n      return `<span class=\"header ${levelClasses[level-1]}\"><span class=\"syntax-marker\">${hashes}</span> ${content}</span>`;\n    });\n  }\n\n  /**\n   * Parse horizontal rules\n   * @param {string} html - HTML line to parse\n   * @returns {string|null} Parsed horizontal rule or null\n   */\n  static parseHorizontalRule(html) {\n    if (html.match(/^(-{3,}|\\*{3,}|_{3,})$/)) {\n      return `<div><span class=\"hr-marker\">${html}</span></div>`;\n    }\n    return null;\n  }\n\n  /**\n   * Parse blockquotes\n   * @param {string} html - HTML line to parse\n   * @returns {string} Parsed blockquote\n   */\n  static parseBlockquote(html) {\n    return html.replace(/^&gt; (.+)$/, (match, content) => {\n      return `<span class=\"blockquote\"><span class=\"syntax-marker\">&gt;</span> ${content}</span>`;\n    });\n  }\n\n  /**\n   * Parse bullet lists\n   * @param {string} html - HTML line to parse\n   * @returns {string} Parsed bullet list item\n   */\n  static parseBulletList(html) {\n    return html.replace(/^((?:&nbsp;)*)([-*])\\s(.+)$/, (match, indent, marker, content) => {\n      return `${indent}<span class=\"syntax-marker\">${marker}</span> ${content}`;\n    });\n  }\n\n  /**\n   * Parse numbered lists\n   * @param {string} html - HTML line to parse\n   * @returns {string} Parsed numbered list item\n   */\n  static parseNumberedList(html) {\n    return html.replace(/^((?:&nbsp;)*)(\\d+\\.)\\s(.+)$/, (match, indent, marker, content) => {\n      return `${indent}<span class=\"syntax-marker\">${marker}</span> ${content}`;\n    });\n  }\n\n  /**\n   * Parse code blocks (markers only)\n   * @param {string} html - HTML line to parse\n   * @returns {string|null} Parsed code fence or null\n   */\n  static parseCodeBlock(html) {\n    if (html.startsWith('```')) {\n      return `<div><span class=\"code-fence\">${html}</span></div>`;\n    }\n    return null;\n  }\n\n  /**\n   * Parse bold text\n   * @param {string} html - HTML with potential bold markdown\n   * @returns {string} HTML with bold styling\n   */\n  static parseBold(html) {\n    html = html.replace(/\\*\\*(.+?)\\*\\*/g, '<strong><span class=\"syntax-marker\">**</span>$1<span class=\"syntax-marker\">**</span></strong>');\n    html = html.replace(/__(.+?)__/g, '<strong><span class=\"syntax-marker\">__</span>$1<span class=\"syntax-marker\">__</span></strong>');\n    return html;\n  }\n\n  /**\n   * Parse italic text\n   * Note: Uses lookbehind assertions - requires modern browsers\n   * @param {string} html - HTML with potential italic markdown\n   * @returns {string} HTML with italic styling\n   */\n  static parseItalic(html) {\n    html = html.replace(/(?<!\\*)\\*(?!\\*)(.+?)(?<!\\*)\\*(?!\\*)/g, '<em><span class=\"syntax-marker\">*</span>$1<span class=\"syntax-marker\">*</span></em>');\n    html = html.replace(/(?<!_)_(?!_)(.+?)(?<!_)_(?!_)/g, '<em><span class=\"syntax-marker\">_</span>$1<span class=\"syntax-marker\">_</span></em>');\n    return html;\n  }\n\n  /**\n   * Parse inline code\n   * @param {string} html - HTML with potential code markdown\n   * @returns {string} HTML with code styling\n   */\n  static parseInlineCode(html) {\n    return html.replace(/`(.+?)`/g, '<code><span class=\"syntax-marker\">`</span>$1<span class=\"syntax-marker\">`</span></code>');\n  }\n\n  /**\n   * Parse links\n   * @param {string} html - HTML with potential link markdown\n   * @returns {string} HTML with link styling\n   */\n  static parseLinks(html) {\n    return html.replace(/\\[(.+?)\\]\\((.+?)\\)/g, '<a href=\"$2\"><span class=\"syntax-marker\">[</span>$1<span class=\"syntax-marker\">](</span><span class=\"syntax-marker\">$2</span><span class=\"syntax-marker\">)</span></a>');\n  }\n\n  /**\n   * Parse all inline elements in correct order\n   * @param {string} text - Text with potential inline markdown\n   * @returns {string} HTML with all inline styling\n   */\n  static parseInlineElements(text) {\n    let html = text;\n    // Order matters: parse code first to avoid conflicts\n    html = this.parseInlineCode(html);\n    html = this.parseLinks(html);\n    html = this.parseBold(html);\n    html = this.parseItalic(html);\n    return html;\n  }\n\n  /**\n   * Parse a single line of markdown\n   * @param {string} line - Raw markdown line\n   * @returns {string} Parsed HTML line\n   */\n  static parseLine(line) {\n    let html = this.escapeHtml(line);\n    \n    // Preserve indentation\n    html = this.preserveIndentation(html, line);\n    \n    // Check for block elements first\n    const horizontalRule = this.parseHorizontalRule(html);\n    if (horizontalRule) return horizontalRule;\n    \n    const codeBlock = this.parseCodeBlock(html);\n    if (codeBlock) return codeBlock;\n    \n    // Parse block elements\n    html = this.parseHeader(html);\n    html = this.parseBlockquote(html);\n    html = this.parseBulletList(html);\n    html = this.parseNumberedList(html);\n    \n    // Parse inline elements\n    html = this.parseInlineElements(html);\n    \n    // Wrap in div to maintain line structure\n    if (html.trim() === '') {\n      return '<div>&nbsp;</div>';\n    }\n    \n    return `<div>${html}</div>`;\n  }\n\n  /**\n   * Parse full markdown text\n   * @param {string} text - Full markdown text\n   * @param {number} activeLine - Currently active line index (optional)\n   * @param {boolean} showActiveLineRaw - Show raw markdown on active line\n   * @returns {string} Parsed HTML\n   */\n  static parse(text, activeLine = -1, showActiveLineRaw = false) {\n    const lines = text.split('\\n');\n    const parsedLines = lines.map((line, index) => {\n      // Show raw markdown on active line if requested\n      if (showActiveLineRaw && index === activeLine) {\n        const content = this.escapeHtml(line) || '&nbsp;';\n        return `<div class=\"raw-line\">${content}</div>`;\n      }\n      \n      // Otherwise, parse the markdown normally\n      return this.parseLine(line);\n    });\n    \n    // Join without newlines to prevent extra spacing\n    return parsedLines.join('');\n  }\n}", "/**\n * Keyboard shortcuts handler for OverType editor\n */\n\n/**\n * ShortcutsManager - Handles keyboard shortcuts for the editor\n */\nexport class ShortcutsManager {\n  constructor(editor) {\n    this.editor = editor;\n    this.textarea = editor.textarea;\n    this.shortcuts = new Map();\n    \n    // Register default shortcuts\n    this.registerDefaults();\n  }\n\n  /**\n   * Register default keyboard shortcuts\n   */\n  registerDefaults() {\n    // Bold - Cmd/Ctrl+B\n    this.register('b', false, () => {\n      this.wrapSelection('**');\n    });\n\n    // Italic - Cmd/Ctrl+I\n    this.register('i', false, () => {\n      this.wrapSelection('*');\n    });\n\n    // Bullet list - Cmd/Ctrl+Shift+8\n    this.register('8', true, () => {\n      this.toggleList('bullet');\n    });\n\n    // Numbered list - Cmd/Ctrl+Shift+7\n    this.register('7', true, () => {\n      this.toggleList('number');\n    });\n\n    // Code - Cmd/Ctrl+K\n    this.register('k', false, () => {\n      this.wrapSelection('`');\n    });\n\n    // Link - Cmd/Ctrl+Shift+K\n    this.register('k', true, () => {\n      this.insertLink();\n    });\n  }\n\n  /**\n   * Register a custom keyboard shortcut\n   * @param {string} key - The key to bind\n   * @param {boolean} shift - Whether shift is required\n   * @param {Function} handler - The handler function\n   */\n  register(key, shift, handler) {\n    const shortcutKey = `${shift ? 'shift+' : ''}${key.toLowerCase()}`;\n    this.shortcuts.set(shortcutKey, handler);\n  }\n\n  /**\n   * Handle keydown events\n   * @param {KeyboardEvent} event - The keyboard event\n   * @returns {boolean} Whether the event was handled\n   */\n  handleKeydown(event) {\n    const isMac = navigator.platform.toLowerCase().includes('mac');\n    const modKey = isMac ? event.metaKey : event.ctrlKey;\n\n    if (!modKey) return false;\n\n    const shortcutKey = `${event.shiftKey ? 'shift+' : ''}${event.key.toLowerCase()}`;\n    const handler = this.shortcuts.get(shortcutKey);\n\n    if (handler) {\n      event.preventDefault();\n      handler.call(this);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Wrap selected text with markers\n   * @param {string} before - Marker to add before\n   * @param {string} after - Marker to add after (defaults to before)\n   */\n  wrapSelection(before, after = before) {\n    const start = this.textarea.selectionStart;\n    const end = this.textarea.selectionEnd;\n    const value = this.textarea.value;\n    const selectedText = value.slice(start, end);\n\n    // Check if already wrapped and unwrap if so\n    if (selectedText.startsWith(before) && selectedText.endsWith(after) && \n        selectedText.length >= before.length + after.length) {\n      const inner = selectedText.slice(before.length, selectedText.length - after.length);\n      this.textarea.setRangeText(inner, start, end, 'end');\n      this.editor.updatePreview();\n      return;\n    }\n\n    // Otherwise wrap the selection\n    this.textarea.setRangeText(before + selectedText + after, start, end, 'end');\n    this.editor.updatePreview();\n  }\n\n  /**\n   * Toggle list formatting\n   * @param {string} type - 'bullet' or 'number'\n   */\n  toggleList(type) {\n    const value = this.textarea.value;\n    const start = this.textarea.selectionStart;\n    const end = this.textarea.selectionEnd;\n\n    // Find line boundaries\n    const lineStart = value.lastIndexOf('\\n', start - 1) + 1;\n    const lineEnd = value.indexOf('\\n', end) === -1 ? value.length : value.indexOf('\\n', end);\n    const block = value.slice(lineStart, lineEnd);\n    const lines = block.split('\\n');\n\n    let transformed;\n    if (type === 'bullet') {\n      transformed = lines.map(line => {\n        // Toggle bullet: remove if present, add if not\n        if (/^\\s*[-*]\\s+/.test(line)) {\n          return line.replace(/^(\\s*)[-*]\\s+/, '$1');\n        }\n        return line.replace(/^(\\s*)/, '$1- ');\n      }).join('\\n');\n    } else if (type === 'number') {\n      transformed = lines.map((line, i) => {\n        // Toggle numbering: remove if present, add if not\n        if (/^\\s*\\d+\\.\\s+/.test(line)) {\n          return line.replace(/^(\\s*)\\d+\\.\\s+/, '$1');\n        }\n        return line.replace(/^(\\s*)/, `$1${i + 1}. `);\n      }).join('\\n');\n    }\n\n    this.textarea.setRangeText(transformed, lineStart, lineEnd, 'end');\n    this.editor.updatePreview();\n  }\n\n  /**\n   * Insert a link at cursor position\n   */\n  insertLink() {\n    const start = this.textarea.selectionStart;\n    const end = this.textarea.selectionEnd;\n    const selectedText = this.textarea.value.slice(start, end);\n    \n    // If text is selected, use it as link text\n    const linkText = selectedText || 'link text';\n    const linkMarkdown = `[${linkText}](url)`;\n    \n    this.textarea.setRangeText(linkMarkdown, start, end, 'end');\n    \n    // Position cursor inside the URL part\n    if (!selectedText) {\n      this.textarea.setSelectionRange(start + 1, start + 1 + linkText.length);\n    } else {\n      const urlStart = start + linkMarkdown.indexOf('(url)') + 1;\n      this.textarea.setSelectionRange(urlStart, urlStart + 3);\n    }\n    \n    this.editor.updatePreview();\n    this.textarea.focus();\n  }\n\n  /**\n   * Insert header at the beginning of current line\n   * @param {number} level - Header level (1-3)\n   */\n  insertHeader(level) {\n    const value = this.textarea.value;\n    const start = this.textarea.selectionStart;\n    \n    // Find line boundaries\n    const lineStart = value.lastIndexOf('\\n', start - 1) + 1;\n    const lineEnd = value.indexOf('\\n', start) === -1 ? value.length : value.indexOf('\\n', start);\n    const line = value.slice(lineStart, lineEnd);\n    \n    // Check if line already has header\n    const headerMatch = line.match(/^(#{1,3})\\s/);\n    if (headerMatch) {\n      // Remove or change header level\n      if (headerMatch[1].length === level) {\n        // Remove header\n        const newLine = line.replace(/^#{1,3}\\s/, '');\n        this.textarea.setRangeText(newLine, lineStart, lineEnd, 'end');\n      } else {\n        // Change header level\n        const newLine = line.replace(/^#{1,3}/, '#'.repeat(level));\n        this.textarea.setRangeText(newLine, lineStart, lineEnd, 'end');\n      }\n    } else {\n      // Add header\n      const newLine = '#'.repeat(level) + ' ' + line;\n      this.textarea.setRangeText(newLine, lineStart, lineEnd, 'end');\n    }\n    \n    this.editor.updatePreview();\n  }\n\n  /**\n   * Cleanup event listeners\n   */\n  destroy() {\n    this.shortcuts.clear();\n  }\n}", "/**\n * Built-in themes for OverType editor\n * Each theme provides a complete color palette for the editor\n */\n\n/**\n * Solar theme - Light, warm and bright\n */\nexport const solar = {\n  name: 'solar',\n  colors: {\n    bgPrimary: '#faf0ca',        // Lemon Chiffon - main background\n    bgSecondary: '#ffffff',      // White - editor background\n    text: '#0d3b66',             // Yale Blue - main text\n    h1: '#f95738',               // Tomato - h1 headers\n    h2: '#ee964b',               // Sandy Brown - h2 headers  \n    h3: '#3d8a51',               // Forest green - h3 headers\n    strong: '#ee964b',           // Sandy Brown - bold text\n    em: '#f95738',               // Tomato - italic text\n    link: '#0d3b66',             // Yale Blue - links\n    code: '#0d3b66',             // Yale Blue - inline code\n    codeBg: 'rgba(244, 211, 94, 0.4)', // Naples Yellow with transparency\n    blockquote: '#5a7a9b',       // Muted blue - blockquotes\n    hr: '#5a7a9b',               // Muted blue - horizontal rules\n    syntaxMarker: 'rgba(13, 59, 102, 0.52)', // Yale Blue with transparency\n    cursor: '#f95738',           // Tomato - cursor\n    selection: 'rgba(244, 211, 94, 0.4)', // Naples Yellow with transparency\n    listMarker: '#ee964b',       // Sandy Brown - list markers\n  }\n};\n\n/**\n * Cave theme - Dark ocean depths\n */\nexport const cave = {\n  name: 'cave',\n  colors: {\n    bgPrimary: '#141E26',        // Deep ocean - main background\n    bgSecondary: '#1D2D3E',      // Darker charcoal - editor background\n    text: '#c5dde8',             // Light blue-gray - main text\n    h1: '#d4a5ff',               // Rich lavender - h1 headers\n    h2: '#f6ae2d',               // Hunyadi Yellow - h2 headers\n    h3: '#9fcfec',               // Brighter blue - h3 headers\n    strong: '#f6ae2d',           // Hunyadi Yellow - bold text\n    em: '#9fcfec',               // Brighter blue - italic text\n    link: '#9fcfec',             // Brighter blue - links\n    code: '#c5dde8',             // Light blue-gray - inline code\n    codeBg: '#1a232b',           // Very dark blue - code background\n    blockquote: '#9fcfec',       // Brighter blue - same as italic\n    hr: '#c5dde8',               // Light blue-gray - horizontal rules\n    syntaxMarker: 'rgba(159, 207, 236, 0.73)', // Brighter blue semi-transparent\n    cursor: '#f26419',           // Orange Pantone - cursor\n    selection: 'rgba(51, 101, 138, 0.4)', // Lapis Lazuli with transparency\n    listMarker: '#f6ae2d',       // Hunyadi Yellow - list markers\n  }\n};\n\n/**\n * Default themes registry\n */\nexport const themes = {\n  solar,\n  cave,\n  // Aliases for backward compatibility\n  light: solar,\n  dark: cave\n};\n\n/**\n * Get theme by name or return custom theme object\n * @param {string|Object} theme - Theme name or custom theme object\n * @returns {Object} Theme configuration\n */\nexport function getTheme(theme) {\n  if (typeof theme === 'string') {\n    const themeObj = themes[theme] || themes.solar;\n    // Preserve the requested theme name (important for 'light' and 'dark' aliases)\n    return { ...themeObj, name: theme };\n  }\n  return theme;\n}\n\n/**\n * Apply theme colors to CSS variables\n * @param {Object} colors - Theme colors object\n * @returns {string} CSS custom properties string\n */\nexport function themeToCSSVars(colors) {\n  const vars = [];\n  for (const [key, value] of Object.entries(colors)) {\n    // Convert camelCase to kebab-case\n    const varName = key.replace(/([A-Z])/g, '-$1').toLowerCase();\n    vars.push(`--${varName}: ${value};`);\n  }\n  return vars.join('\\n');\n}\n\n/**\n * Merge custom colors with base theme\n * @param {Object} baseTheme - Base theme object\n * @param {Object} customColors - Custom color overrides\n * @returns {Object} Merged theme object\n */\nexport function mergeTheme(baseTheme, customColors = {}) {\n  return {\n    ...baseTheme,\n    colors: {\n      ...baseTheme.colors,\n      ...customColors\n    }\n  };\n}", "/**\n * CSS styles for OverType editor\n * Embedded in JavaScript to ensure single-file distribution\n */\n\nimport { themeToCSSVars } from './themes.js';\n\n/**\n * Generate the complete CSS for the editor\n * @param {Object} options - Configuration options\n * @returns {string} Complete CSS string\n */\nexport function generateStyles(options = {}) {\n  const {\n    fontSize = '14px',\n    lineHeight = 1.6,\n    fontFamily = \"'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace\",\n    padding = '20px',\n    theme = null,\n    mobile = {}\n  } = options;\n\n  // Generate mobile overrides\n  const mobileStyles = Object.keys(mobile).length > 0 ? `\n    @media (max-width: 640px) {\n      .overtype-wrapper .overtype-input,\n      .overtype-wrapper .overtype-preview {\n        ${Object.entries(mobile)\n          .map(([prop, val]) => {\n            const cssProp = prop.replace(/([A-Z])/g, '-$1').toLowerCase();\n            return `${cssProp}: ${val} !important;`;\n          })\n          .join('\\n        ')}\n      }\n    }\n  ` : '';\n\n  // Generate theme variables if provided\n  const themeVars = theme && theme.colors ? themeToCSSVars(theme.colors) : '';\n\n  return `\n    /* OverType Editor Styles */\n    .overtype-wrapper {\n      position: relative !important;\n      width: 100% !important;\n      height: 100% !important;\n      overflow: hidden !important;\n      background: var(--bg-secondary, #ffffff) !important;\n      ${themeVars ? `\n      /* Theme Variables */\n      ${themeVars}` : ''}\n    }\n\n    /* Critical alignment styles - must be identical for both layers */\n    .overtype-wrapper .overtype-input,\n    .overtype-wrapper .overtype-preview {\n      /* Positioning - must be identical */\n      position: absolute !important;\n      top: 0 !important;\n      left: 0 !important;\n      width: 100% !important;\n      height: 100% !important;\n      \n      /* Font properties - any difference breaks alignment */\n      font-family: ${fontFamily} !important;\n      font-size: ${fontSize} !important;\n      line-height: ${lineHeight} !important;\n      font-weight: normal !important;\n      font-style: normal !important;\n      font-variant: normal !important;\n      font-stretch: normal !important;\n      font-kerning: none !important;\n      font-feature-settings: normal !important;\n      \n      /* Box model - must match exactly */\n      padding: ${padding} !important;\n      margin: 0 !important;\n      border: none !important;\n      outline: none !important;\n      box-sizing: border-box !important;\n      \n      /* Text layout - critical for character positioning */\n      white-space: pre-wrap !important;\n      word-wrap: break-word !important;\n      word-break: normal !important;\n      overflow-wrap: break-word !important;\n      tab-size: 2 !important;\n      -moz-tab-size: 2 !important;\n      text-align: left !important;\n      text-indent: 0 !important;\n      letter-spacing: normal !important;\n      word-spacing: normal !important;\n      \n      /* Text rendering */\n      text-transform: none !important;\n      text-rendering: auto !important;\n      -webkit-font-smoothing: auto !important;\n      -webkit-text-size-adjust: 100% !important;\n      \n      /* Direction and writing */\n      direction: ltr !important;\n      writing-mode: horizontal-tb !important;\n      unicode-bidi: normal !important;\n      text-orientation: mixed !important;\n      \n      /* Visual effects that could shift perception */\n      text-shadow: none !important;\n      filter: none !important;\n      transform: none !important;\n      zoom: 1 !important;\n      \n      /* Vertical alignment */\n      vertical-align: baseline !important;\n      \n      /* Size constraints */\n      min-width: 0 !important;\n      min-height: 0 !important;\n      max-width: none !important;\n      max-height: none !important;\n      \n      /* Overflow */\n      overflow-y: auto !important;\n      overflow-x: auto !important;\n      scrollbar-width: auto !important;\n      scrollbar-gutter: auto !important;\n      \n      /* Animation/transition - disabled to prevent movement */\n      animation: none !important;\n      transition: none !important;\n    }\n\n    /* Input layer styles */\n    .overtype-wrapper .overtype-input {\n      /* Layer positioning */\n      z-index: 1 !important;\n      \n      /* Text visibility */\n      color: transparent !important;\n      caret-color: var(--cursor, #f95738) !important;\n      background-color: transparent !important;\n      \n      /* Textarea-specific */\n      resize: none !important;\n      appearance: none !important;\n      -webkit-appearance: none !important;\n      -moz-appearance: none !important;\n      \n      /* Prevent mobile zoom on focus */\n      touch-action: manipulation !important;\n      \n      /* Disable autofill and spellcheck */\n      autocomplete: off !important;\n      autocorrect: off !important;\n      autocapitalize: off !important;\n      spellcheck: false !important;\n    }\n\n    .overtype-wrapper .overtype-input::selection {\n      background-color: var(--selection, rgba(244, 211, 94, 0.4));\n    }\n\n    /* Preview layer styles */\n    .overtype-wrapper .overtype-preview {\n      /* Layer positioning */\n      z-index: 0 !important;\n      pointer-events: none !important;\n      color: var(--text, #0d3b66) !important;\n      background-color: transparent !important;\n      \n      /* Prevent text selection */\n      user-select: none !important;\n      -webkit-user-select: none !important;\n      -moz-user-select: none !important;\n      -ms-user-select: none !important;\n    }\n\n    /* Defensive styles for preview child divs */\n    .overtype-wrapper .overtype-preview div {\n      /* Reset any inherited styles */\n      margin: 0 !important;\n      padding: 0 !important;\n      border: none !important;\n      text-align: left !important;\n      text-indent: 0 !important;\n      display: block !important;\n      position: static !important;\n      transform: none !important;\n      min-height: 0 !important;\n      max-height: none !important;\n      line-height: inherit !important;\n      font-size: inherit !important;\n      font-family: inherit !important;\n    }\n\n    /* Markdown element styling - NO SIZE CHANGES */\n    .overtype-wrapper .overtype-preview .header {\n      font-weight: bold !important;\n    }\n\n    /* Header colors */\n    .overtype-wrapper .overtype-preview .h1 { \n      color: var(--h1, #f95738) !important; \n    }\n    .overtype-wrapper .overtype-preview .h2 { \n      color: var(--h2, #ee964b) !important; \n    }\n    .overtype-wrapper .overtype-preview .h3 { \n      color: var(--h3, #3d8a51) !important; \n    }\n\n    /* Bold text */\n    .overtype-wrapper .overtype-preview strong {\n      color: var(--strong, #ee964b) !important;\n      font-weight: bold !important;\n    }\n\n    /* Italic text */\n    .overtype-wrapper .overtype-preview em {\n      color: var(--em, #f95738) !important;\n      text-decoration-color: var(--em, #f95738) !important;\n      text-decoration-thickness: 1px !important;\n      font-style: italic !important;\n    }\n\n    /* Inline code */\n    .overtype-wrapper .overtype-preview code {\n      background: var(--code-bg, rgba(244, 211, 94, 0.4)) !important;\n      color: var(--code, #0d3b66) !important;\n      padding: 0 !important;\n      border-radius: 2px !important;\n      font-family: inherit !important;\n      font-weight: normal !important;\n    }\n\n    /* Code blocks */\n    .overtype-wrapper .overtype-preview pre {\n      background: #1e1e1e !important;\n      padding: 0 !important;\n      margin: 0 !important;\n      border-radius: 4px !important;\n      overflow-x: auto !important;\n    }\n\n    .overtype-wrapper .overtype-preview pre code {\n      background: none !important;\n    }\n\n    /* Blockquotes */\n    .overtype-wrapper .overtype-preview .blockquote {\n      color: var(--blockquote, #5a7a9b) !important;\n      padding: 0 !important;\n      margin: 0 !important;\n      border: none !important;\n    }\n\n    /* Links */\n    .overtype-wrapper .overtype-preview a {\n      color: var(--link, #0d3b66) !important;\n      text-decoration: underline !important;\n      font-weight: normal !important;\n    }\n\n    .overtype-wrapper .overtype-preview a:hover {\n      text-decoration: underline !important;\n      color: var(--link, #0d3b66) !important;\n    }\n\n    /* Lists - no list styling */\n    .overtype-wrapper .overtype-preview ul,\n    .overtype-wrapper .overtype-preview ol {\n      list-style: none !important;\n      margin: 0 !important;\n      padding: 0 !important;\n    }\n\n    .overtype-wrapper .overtype-preview li {\n      margin: 0 !important;\n      padding: 0 !important;\n      list-style: none !important;\n    }\n\n    /* Horizontal rules */\n    .overtype-wrapper .overtype-preview hr {\n      border: none !important;\n      color: var(--hr, #5a7a9b) !important;\n      margin: 0 !important;\n      padding: 0 !important;\n    }\n\n    .overtype-wrapper .overtype-preview .hr-marker {\n      color: var(--hr, #5a7a9b) !important;\n      opacity: 0.6 !important;\n    }\n\n    /* Code fence markers - with background when not in code block */\n    .overtype-wrapper .overtype-preview .code-fence {\n      color: var(--code, #0d3b66) !important;\n      background: var(--code-bg, rgba(244, 211, 94, 0.4)) !important;\n    }\n    \n    /* Code block lines - background for entire code block */\n    .overtype-wrapper .overtype-preview .code-block-line {\n      background: var(--code-bg, rgba(244, 211, 94, 0.4)) !important;\n    }\n    \n    /* Remove background from code fence when inside code block line */\n    .overtype-wrapper .overtype-preview .code-block-line .code-fence {\n      background: transparent !important;\n    }\n\n    /* Raw markdown line */\n    .overtype-wrapper .overtype-preview .raw-line {\n      color: var(--raw-line, #5a7a9b) !important;\n      font-style: normal !important;\n      font-weight: normal !important;\n    }\n\n    /* Syntax markers */\n    .overtype-wrapper .overtype-preview .syntax-marker {\n      color: var(--syntax-marker, rgba(13, 59, 102, 0.52)) !important;\n      opacity: 0.7 !important;\n    }\n\n    /* List markers */\n    .overtype-wrapper .overtype-preview .list-marker {\n      color: var(--list-marker, #ee964b) !important;\n    }\n\n    /* Stats bar */\n    .overtype-wrapper.with-stats {\n      padding-bottom: 40px !important;\n    }\n    \n    .overtype-wrapper .overtype-stats {\n      position: absolute !important;\n      bottom: 0 !important;\n      left: 0 !important;\n      right: 0 !important;\n      height: 40px !important;\n      padding: 0 20px !important;\n      background: #f8f9fa !important;\n      border-top: 1px solid #e0e0e0 !important;\n      display: flex !important;\n      justify-content: space-between !important;\n      align-items: center !important;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;\n      font-size: 0.85rem !important;\n      color: #666 !important;\n      z-index: 2 !important;\n    }\n    \n    /* Dark theme stats bar */\n    .overtype-wrapper[data-theme=\"cave\"] .overtype-stats {\n      background: var(--bg-secondary, #1D2D3E) !important;\n      border-top: 1px solid rgba(197, 221, 232, 0.1) !important;\n      color: var(--text, #c5dde8) !important;\n    }\n    \n    .overtype-wrapper .overtype-stats .overtype-stat {\n      display: flex !important;\n      align-items: center !important;\n      gap: 5px !important;\n      white-space: nowrap !important;\n    }\n    \n    .overtype-wrapper .overtype-stats .live-dot {\n      width: 8px !important;\n      height: 8px !important;\n      background: #4caf50 !important;\n      border-radius: 50% !important;\n      animation: pulse 2s infinite !important;\n    }\n    \n    @keyframes pulse {\n      0%, 100% { opacity: 1; transform: scale(1); }\n      50% { opacity: 0.6; transform: scale(1.2); }\n    }\n    \n    /* Adjust textarea and preview for stats bar */\n    .overtype-wrapper.with-stats .overtype-input,\n    .overtype-wrapper.with-stats .overtype-preview {\n      height: calc(100% - 40px) !important;\n    }\n\n    ${mobileStyles}\n  `;\n}"],
  "mappings": "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",
  "names": []
}
